{
  "entities": {
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Product)"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "imageUrl",
        "categoryId"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category for products.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a customer profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the client."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the client."
        },
        "email": {
          "type": "string",
          "description": "Email address of the client.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the client."
        },
        "billingAddress": {
          "type": "string",
          "description": "Billing address of the client."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone",
        "billingAddress"
      ]
    },
    "Invoice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Invoice",
      "type": "object",
      "description": "Represents an invoice.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the invoice."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Invoice)"
        },
        "invoiceDate": {
          "type": "string",
          "description": "Date the invoice was issued.",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "description": "Date the invoice is due.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the invoice."
        },
        "discountAmount": {
          "type": "number",
          "description": "Discount applied to the invoice."
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Invoice 1:N Product)"
        }
      },
      "required": [
        "id",
        "clientId",
        "invoiceDate",
        "dueDate",
        "totalAmount",
        "discountAmount"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "Username of the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "points": {
          "type": "number",
          "description": "Points accumulated by the user."
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "points"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores product categories. Categories are global and accessible to all users.",
          "params": [
            {
              "name": "categoryId",
              "description": "Unique identifier for the category."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information. Products are global and accessible to all users.",
          "params": [
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile data, including points. User data is private to the user.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user (same as auth.uid)."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client profiles associated with a specific user. Clients are private to the user.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user (same as auth.uid)."
            },
            {
              "name": "clientId",
              "description": "Unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/invoices/{invoiceId}",
        "definition": {
          "entityName": "Invoice",
          "schema": {
            "$ref": "#/backend/entities/Invoice"
          },
          "description": "Stores invoice data associated with a specific user. Invoices are private to the user.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user (same as auth.uid)."
            },
            {
              "name": "invoiceId",
              "description": "Unique identifier for the invoice."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the Hisaabgar application's features, including product catalog management, client management, invoice creation, and reporting. It prioritizes authorization independence, clarity, and scalability.\n\n**Authorization Independence:**\n*   User-specific data (clients, invoices) is stored under the `/users/{userId}` path, making ownership clear and rules simple.\n*   Product categories and products can be managed globally, eliminating the need for complex authorization checks based on user roles or ownership. If product/category ownership were required, the `ownerId` field would need to be added and denormalized.\n\n**QAPs (Rules are not Filters):**\n*   The segregation of user-specific data and global product data allows for secure list operations. Rules can easily filter data based on the requesting user's ID or allow access to global product information without complex filtering logic.\n\n**Offline and Online Sync:**\nThe data structure supports both offline and online synchronization as User data will be stored under `/users/{userId}`. This makes it straightforward to manage syncing relevant data for each user.\n\n**Points System**\nThe user document contains a `points` field. This will allow the point system to be implemented."
  }
}