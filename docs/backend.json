{
  "entities": {
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Product)"
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "description": {
          "type": "string",
          "description": "Description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        }
      },
      "required": [
        "id",
        "categoryId",
        "name",
        "imageUrl",
        "description",
        "price"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category of products.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a customer profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the client."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the client."
        },
        "email": {
          "type": "string",
          "description": "Email address of the client.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the client."
        },
        "billingAddress": {
          "type": "string",
          "description": "Billing address of the client."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone",
        "billingAddress"
      ]
    },
    "Invoice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Invoice",
      "type": "object",
      "description": "Represents an invoice.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the invoice."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Invoice)"
        },
        "invoiceDate": {
          "type": "string",
          "description": "Date when the invoice was created.",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "description": "Due date for the invoice.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the invoice."
        },
        "discountAmount": {
          "type": "number",
          "description": "Discount applied to the invoice."
        },
        "status": {
          "type": "string",
          "description": "Status of the invoice (e.g., paid, unpaid, overdue)."
        }
      },
      "required": [
        "id",
        "clientId",
        "invoiceDate",
        "dueDate",
        "totalAmount",
        "discountAmount",
        "status"
      ]
    },
    "InvoiceItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InvoiceItem",
      "type": "object",
      "description": "Represents an item in an invoice.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the invoice item."
        },
        "invoiceId": {
          "type": "string",
          "description": "Reference to Invoice. (Relationship: Invoice 1:N InvoiceItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N InvoiceItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product in the invoice item."
        },
        "unitPrice": {
          "type": "number",
          "description": "Unit price of the product in the invoice item."
        },
        "total": {
          "type": "number",
          "description": "Total price of the invoice item (quantity * unitPrice)."
        }
      },
      "required": [
        "id",
        "invoiceId",
        "productId",
        "quantity",
        "unitPrice",
        "total"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client profiles. Each client document is identified by its unique clientId.",
          "params": [
            {
              "name": "clientId",
              "description": "Unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/clients/{clientId}/invoices/{invoiceId}",
        "definition": {
          "entityName": "Invoice",
          "schema": {
            "$ref": "#/backend/entities/Invoice"
          },
          "description": "Stores invoices associated with a specific client. Each invoice document is identified by its unique invoiceId.",
          "params": [
            {
              "name": "clientId",
              "description": "Unique identifier for the client."
            },
            {
              "name": "invoiceId",
              "description": "Unique identifier for the invoice."
            }
          ]
        }
      },
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores product categories. Each category document is identified by its unique categoryId.",
          "params": [
            {
              "name": "categoryId",
              "description": "Unique identifier for the category."
            }
          ]
        }
      },
      {
        "path": "/categories/{categoryId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores products within a specific category. Each product document is identified by its unique productId.",
          "params": [
            {
              "name": "categoryId",
              "description": "Unique identifier for the category."
            },
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the Hisaabgar application's core features: product catalog management, client management, invoice creation, and reporting. It prioritizes authorization independence, clarity, and scalability.\n\n**Authorization Independence and QAPs:**\n\n*   **Clients and Invoices:**  Clients are stored under `/clients/{clientId}`. Invoices are stored under `/clients/{clientId}/invoices/{invoiceId}`. This structure allows for easy querying of a client's invoices and direct ownership. List operations are secured because access to invoices is tied to the client ID.  No denormalization is required here as access control is straightforward.\n*   **Categories and Products:** Categories are stored in `/categories/{categoryId}` and products are stored in `/categories/{categoryId}/products/{productId}`. Again, this facilitates direct querying and management of products within categories and vice versa. Listing products is restricted to those within a specific category, addressing QAPs without denormalization.\n\nThis design avoids `get()` calls in security rules by using path-based ownership for `Client`, `Invoice`, `Category` and `Product`. Each entity is directly accessible via its ID or the ID of its direct parent. This structure is highly secure and makes ownership-based security rules simple and efficient."
  }
}