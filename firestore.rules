rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to the product catalog. Only the product owner can create, update, or delete a product.
     * @path /products/{productId}
     * @allow (get, list): Any user can read the product catalog.
     * @deny (create, update, delete): No one can modify the products.
     * @principle Allows public read access to a global catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the category list. Only the product owner can create, update, or delete a category.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read the category list.
     * @deny (create, update, delete): No one can modify the categories.
     * @principle Allows public read access to a global catalog.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants the user read and write access to their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): The user can access their own profile.
     * @deny (list): User listing is not permitted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, update, delete: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(request.auth.uid);
        allow list: if false;
    }

    /**
     * @description Grants the user ownership of their client documents.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create, get, update, delete, list): The user can manage their own client data.
     * @deny: Other users cannot access this data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow read, create, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants the user ownership of their invoice documents.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create, get, update, delete, list): The user can manage their own invoice data.
     * @deny: Other users cannot access this data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow read, create, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants the user ownership of their store documents.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create, get, update, delete, list): The user can manage their own store data.
     * @deny: Other users cannot access this data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/stores/{storeId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow read, create, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants the user ownership of their unit documents.
     * @path /users/{userId}/units/{unitId}
     * @allow (create, get, update, delete, list): The user can manage their own unit data.
     * @deny: Other users cannot access this data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/units/{unitId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow read, create, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

       /**
     * @description Grants the user ownership of their setting documents.
     * @path /users/{userId}/settings/{settingId}
     * @allow (create, get, update, delete, list): The user can manage their own settings data.
     * @deny: Other users cannot access this data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/settings/{settingId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow read, create, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }
  }
}