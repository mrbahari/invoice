/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes data security by implementing strict access control based on resource ownership for user-specific data and public read access with owner-only writes for public collections.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level, publicly readable collections.
 * - Stores are stored in a top-level, publicly readable collection. Writes are restricted to the store owner.
 * - Clients, Invoices, Units, and ToolbarSettings are stored in user-specific subcollections under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Public listing is enabled for the Products, Categories, and Stores collections.
 * - Strict ownership is enforced for user-specific data under `/users/{userId}`.
 * - The rules do NOT perform extensive data validation in this prototyping phase.
 * - Denormalization is used where necessary (e.g., `ownerId` on Stores) to avoid costly `get()` calls in the rules.
 *
 * Denormalization for Authorization:
 * - The `Store` entity contains an `ownerId` field to enable secure ownership checks without needing to query a separate user document.
 *
 * Structural Segregation:
 * - Private user data (Clients, Invoices, Units, ToolbarSettings) is stored under the `/users/{userId}` path, while public data (Products, Categories, Stores) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but only allows authorized users to create, update, or delete products.
     * @path /products/{productId}
     * @allow (get, list): if true
     * @allow (create): if request.auth != null
     * @allow (update): if request.auth != null
     * @allow (delete): if request.auth != null
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Allows public read access while restricting writes to authorized users.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read category information, but only allows authorized users to create, update, or delete categories.
     * @path /categories/{categoryId}
     * @allow (get, list): if true
     * @allow (create): if request.auth != null
     * @allow (update): if request.auth != null
     * @allow (delete): if request.auth != null
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Allows public read access while restricting writes to authorized users.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }
    
    /**
     * @description Allows anyone to read store information, but only the store owner can create, update, or delete the store.
     * @path /stores/{storeId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == request.resource.data.ownerId
     * @allow (update): if isExistingOwner(resource.data.ownerId)
     * @allow (delete): if isExistingOwner(resource.data.ownerId)
     * @deny (create): if request.auth.uid != request.resource.data.ownerId
     * @deny (update): if !isExistingOwner(resource.data.ownerId)
     * @deny (delete): if !isExistingOwner(resource.data.ownerId)
     * @principle Enforces store ownership for writes, allowing public read access.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows a user to manage their own clients. Only the owner can read, create, update, or delete clients under their user ID.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update): if isExistingOwner(userId)
     * @allow (delete): if isExistingOwner(userId)
     * @deny (get): if !isOwner(userId)
     * @deny (list): if !isOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations on a user's clients.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own invoices. Only the owner can read, create, update, or delete invoices under their user ID.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update): if isExistingOwner(userId)
     * @allow (delete): if isExistingOwner(userId)
     * @deny (get): if !isOwner(userId)
     * @deny (list): if !isOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations on a user's invoices.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own units. Only the owner can read, create, update, or delete units under their user ID.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update): if isExistingOwner(userId)
     * @allow (delete): if isExistingOwner(userId)
     * @deny (get): if !isOwner(userId)
     * @deny (list): if !isOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations on a user's units.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own toolbar settings. Only the owner can read, create, update, or delete settings under their user ID.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get): if isOwner(userId)
     * @allow (list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update): if isExistingOwner(userId)
     * @allow (delete): if isExistingOwner(userId)
     * @deny (get): if !isOwner(userId)
     * @deny (list): if !isOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations on a user's toolbar settings.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }
}