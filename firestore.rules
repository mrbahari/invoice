rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access, but restricts write access to the owner of the store.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read the product catalog.
     * @allow (create, update, delete): Only the store owner (determined by `storeId`) can modify product data.
     * @deny (create, update, delete): A user who is not the store owner attempts to modify product data.
     * @principle Allows public listing of products but restricts writes to the owner of the store.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId != null && request.auth.uid == request.resource.data.storeId;
      allow update, delete: if isSignedIn() && resource.data.storeId == request.auth.uid;
    }

    /**
     * @description Allows public read access, but restricts write access to the owner of the store.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read the category list.
     * @allow (create, update, delete): Only the store owner (determined by `storeId`) can modify category data.
     * @deny (create, update, delete): A user who is not the store owner attempts to modify category data.
     * @principle Allows public listing of categories but restricts writes to the owner of the store.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId != null && request.auth.uid == request.resource.data.storeId;
      allow update, delete: if isSignedIn() && resource.data.storeId == request.auth.uid;
    }

    /**
     * @description Allows public read access, but restricts write access to the owner of the store.
     * @path /stores/{storeId}
     * @allow (get, list): Anyone can read the store list.
     * @allow (create): Only a signed-in user can create a store, the `ownerId` is validated for being equal to current user's id.
     * @allow (update, delete): Only the store owner (determined by `ownerId`) can modify store data.
     * @deny (create, update, delete): A user who is not the store owner attempts to modify store data.
     * @principle Allows public listing of stores but restricts writes to the owner of the store.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Enforces user-specific data access for clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list): Only the user with the matching `userId` can access their own clients.
     * @allow (create): Only the user with the matching `userId` can create a new client. The `clientId` in the path must match the `id` in the data.
     * @allow (update, delete): Only the user with the matching `userId` can modify or delete their own client.
     * @deny (get, list, create, update, delete): Another user attempts to access or modify this user's clients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == clientId;
      allow update, delete: if isOwner(userId) && resource.data.id == request.resource.data.id;
    }

    /**
     * @description Enforces user-specific data access for invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list): Only the user with the matching `userId` can access their own invoices.
     * @allow (create): Only the user with the matching `userId` can create a new invoice. The `invoiceId` in the path must match the `id` in the data.
     * @allow (update, delete): Only the user with the matching `userId` can modify or delete their own invoice.
     * @deny (get, list, create, update, delete): Another user attempts to access or modify this user's invoices.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == invoiceId;
      allow update, delete: if isOwner(userId) && resource.data.id == request.resource.data.id;
    }

    /**
     * @description Enforces user-specific data access for units of measurement.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list): Only the user with the matching `userId` can access their own units.
     * @allow (create): Only the user with the matching `userId` can create a new unit. The `unitId` in the path must match the `id` in the data.
     * @allow (update, delete): Only the user with the matching `userId` can modify or delete their own unit.
     * @deny (get, list, create, update, delete): Another user attempts to access or modify this user's units.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == unitId;
      allow update, delete: if isOwner(userId) && resource.data.id == request.resource.data.id;
    }

    /**
     * @description Enforces user-specific data access for toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get, list): Only the user with the matching `userId` can access their toolbar settings.
     * @allow (create): Only the user with the matching `userId` can create toolbar settings.
     * @allow (update, delete): Only the user with the matching `userId` can modify or delete their own toolbar settings.
     * @deny (get, list, create, update, delete): Another user attempts to access or modify this user's toolbar settings.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}