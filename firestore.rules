
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isStoreOwner(storeId) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
    }
    
    // A function to check if the write is part of a batch.
    function isBatchWrite() {
      return request.auth != null && request.auth.token.firebase.sign_in_provider == 'custom';
    }
    
    // --- Public Collections (Products, Categories, Stores) ---
    // Anyone can read, but only the store owner can write.

    match /products/{productId} {
      allow read: if true;
      allow create: if isStoreOwner(request.resource.data.storeId) || isBatchWrite();
      allow update: if isStoreOwner(resource.data.storeId);
      allow delete: if isStoreOwner(resource.data.storeId) || isBatchWrite();
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow create: if isStoreOwner(request.resource.data.storeId) || isBatchWrite();
      allow update: if isStoreOwner(resource.data.storeId);
      allow delete: if isStoreOwner(resource.data.storeId) || isBatchWrite();
    }
    
    match /stores/{storeId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data.ownerId) || isBatchWrite();
        allow update: if isSignedIn() && isOwner(resource.data.ownerId);
        allow delete: if isSignedIn() && isOwner(resource.data.ownerId) || isBatchWrite();
    }
    
    // --- User-Specific Data ---
    // All user data is stored under a path that includes their user ID.
    // This allows us to create rules that only grant access to the owner of that data.

    match /users/{userId} {
      // General rule: Only the authenticated user can access their own data.
      allow read, write: if isSignedIn() && isOwner(userId);

      // --- Private User Sub-collections ---
      match /clients/{clientId} {
        allow read, write: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId) || isBatchWrite();
        allow delete: if isSignedIn() && isOwner(userId) || isBatchWrite();
      }

      match /invoices/{invoiceId} {
        allow read, write: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId) || isBatchWrite();
        allow delete: if isSignedIn() && isOwner(userId) || isBatchWrite();
      }

      match /units/{unitId} {
        allow read, write: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId) || isBatchWrite();
        allow delete: if isSignedIn() && isOwner(userId) || isBatchWrite();
      }
      
      // Settings are stored in a single document, not a collection.
      match /settings/toolbarPositions {
         allow read, write: if isSignedIn() && isOwner(userId);
         allow create: if isSignedIn() && isOwner(userId) || isBatchWrite();
         allow delete: if isSignedIn() && isOwner(userId) || isBatchWrite();
      }
    }
  }
}

    