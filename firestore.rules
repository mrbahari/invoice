/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric model for user-specific data while allowing public read access to global catalogs.
 *
 * Data Structure:
 * - Public Catalogs: Products and Categories are stored in top-level collections, accessible for public reading.
 * - User-Specific Data: Customers, Invoices, Stores, Units and Settings are nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Public Catalog Read Access: Products and Categories are readable by all users, including unauthenticated users.
 * - Strict User Ownership: All data under `/users/{userId}` is strictly controlled by the user with the matching `userId`.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization is used in these rules, as ownership is derived directly from the path.
 *
 * Structural Segregation:
 *  Public catalog data is stored in top-level collections, while private user data is stored under `/users/{userId}`, providing clear segregation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read products; restricts writes to ensure proper ownership.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create): Not applicable (no public creation).
     * @deny (create, update, delete): No public modification or deletion.
     * @principle Public read, owner-only writes (requires an owner field in schema, but not yet implemented)
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read categories; restricts writes.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @allow (create): Not applicable (no public creation).
     * @deny (create, update, delete): No public modification or deletion.
     * @principle Public read, owner-only writes (requires an owner field in schema, but not yet implemented)
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create): If the user ID in the path matches the authenticated user's ID (self-creation).
     * @allow (get, list, update, delete): If the user ID in the path matches the authenticated user's ID (owner).
     * @deny: Attempts to access or modify other user's profiles.
     * @principle Enforces document ownership for all operations under /users/{userId}.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces ownership for clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create): If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete): If the user ID in the path matches the authenticated user's ID.
     * @deny: Attempts to access or modify other user's clients.
     * @principle Enforces document ownership for all operations under /users/{userId}/clients/{clientId}.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create): If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete): If the user ID in the path matches the authenticated user's ID.
     * @deny: Attempts to access or modify other user's invoices.
     * @principle Enforces document ownership for all operations under /users/{userId}/invoices/{invoiceId}.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create): If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete): If the user ID in the path matches the authenticated user's ID.
     * @deny: Attempts to access or modify other user's stores.
     * @principle Enforces document ownership for all operations under /users/{userId}/stores/{storeId}.
     */
    match /users/{userId}/stores/{storeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create): If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete): If the user ID in the path matches the authenticated user's ID.
     * @deny: Attempts to access or modify other user's units.
     * @principle Enforces document ownership for all operations under /users/{userId}/units/{unitId}.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

     /**
      * @description Enforces ownership for settings.
      * @path /users/{userId}/settings/{settingId}
      * @allow (create): If the user ID in the path matches the authenticated user's ID.
      * @allow (get, list, update, delete): If the user ID in the path matches the authenticated user's ID.
      * @deny: Attempts to access or modify other user's settings.
      * @principle Enforces document ownership for all operations under /users/{userId}/settings/{settingId}.
      */
    match /users/{userId}/settings/{settingId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
  }
}