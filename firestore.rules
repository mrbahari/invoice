/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data
 *  while allowing public read access to shared product and category catalogs.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level collections, intended for public listing.
 *   Each document MUST have a `storeId` property indicating the owner.
 * - All other data (clients, invoices, stores, units, settings) is nested under
 *   /users/{userId}, providing strong isolation between users.
 *
 * Key Security Decisions:
 * - Users can only manage (create, update, delete) data under their own user ID.
 * - Products and Categories are publicly readable but only writable by the store (owner).
 *
 * Denormalization for Authorization:
 * - Products and Categories have a `storeId` field that's used for ownership checks,
 *   avoiding the need for extra `get()` calls to determine the owner.
 *
 * Structural Segregation:
 * - Public and private content is separated into top-level collections (products, categories)
 *   and user-scoped subcollections (clients, invoices, stores, units). This approach
 *   is more secure and performant than using a single collection with a boolean flag
 *   to differentiate between public and private items.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication required for all protected paths.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership for user-specific data.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource, and it exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership and resource existence for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Public collection of all products.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read any product.
     * @allow (create) - User with storeId equal to product.storeId can create the product.
     * @allow (update, delete) - User with storeId equal to product.storeId can update/delete the product.
     * @deny (create) - User attempts to create a product with mismatched storeId.
     * @deny (update, delete) - User attempts to update/delete a product they do not own.
     * @principle Allows public reads but restricts writes to the owner store.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.storeId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.storeId == request.auth.uid;
    }

    /**
     * @description Public collection of all categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read any category.
     * @allow (create) - User with storeId equal to category.storeId can create the category.
     * @allow (update, delete) - User with storeId equal to category.storeId can update/delete the category.
     * @deny (create) - User attempts to create a category with mismatched storeId.
     * @deny (update, delete) - User attempts to update/delete a category they do not own.
     * @principle Allows public reads but restricts writes to the owner store.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.storeId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.storeId == request.auth.uid;
    }

    /**
     * @description User-specific collection of clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list) - The user can read their own clients.
     * @allow (create) - The user can create clients under their own ID.
     * @allow (update, delete) - The user can update/delete their own existing clients.
     * @deny (create) - User attempts to create a client under another user's ID.
     * @deny (update, delete) - User attempts to update/delete a client they do not own or that does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list) - The user can read their own invoices.
     * @allow (create) - The user can create invoices under their own ID.
     * @allow (update, delete) - The user can update/delete their own existing invoices.
     * @deny (create) - User attempts to create an invoice under another user's ID.
     * @deny (update, delete) - User attempts to update/delete an invoice they do not own or that does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (get, list) - The user can read their own stores.
     * @allow (create) - The user can create stores under their own ID.
     * @allow (update, delete) - The user can update/delete their own existing stores.
     * @deny (create) - User attempts to create a store under another user's ID.
     * @deny (update, delete) - User attempts to update/delete a store they do not own or that does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of measurement units.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list) - The user can read their own measurement units.
     * @allow (create) - The user can create measurement units under their own ID.
     * @allow (update, delete) - The user can update/delete their own existing measurement units.
     * @deny (create) - User attempts to create a measurement unit under another user's ID.
     * @deny (update, delete) - User attempts to update/delete a measurement unit they do not own or that does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores settings for a user, like toolbar positions.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get) - The user can read their own settings.
     * @allow (create) - The user can create settings under their own ID.
     * @allow (update, delete) - The user can update/delete their own existing settings.
     * @deny (create) - User attempts to create settings under another user's ID.
     * @deny (update, delete) - User attempts to update/delete settings they do not own or that does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}