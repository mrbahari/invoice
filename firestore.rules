/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for the majority of user-generated content,
 * while allowing public read access to visitor logs.
 *
 * Data Structure:
 * - User-specific data (stores, products, categories, profiles, invoices, units, and toolbar settings)
 *   are nested under /users/{userId}/... This ensures that only the owning user can manage their own data.
 * - Visitor logs are stored in the top-level /visitorLogs/{logId} collection and are publicly readable.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the path structure and lack of explicit rules for listing the /users collection.
 * - Ownership is enforced by matching the authenticated user's UID against the {userId} path segment and internal document fields.
 * - Public read access is granted to visitor logs for analytics purposes.
 *
 * Denormalization for Authorization:
 *  - The 'Product' documents have denormalized `storeId`, `subCategoryId` fields.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` collection, while public visitor logs are stored in the top-level `/visitorLogs` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user-specific stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create, update, delete) if the user is the owner of the store.
     * @allow (get, list) if the user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/stores/{storeId} {
      // Definition of `isOwner` function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Definition of `isExistingOwner` function
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants owner-only access to user-specific products.
     * @path /users/{userId}/products/{productId}
     * @allow (create, update, delete) if the user is the owner of the product.
     * @allow (get, list) if the user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/products/{productId} {
      // Definition of `isOwner` function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Definition of `isExistingOwner` function
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants owner-only access to user-specific categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create, update, delete) if the user is the owner of the category.
     * @allow (get, list) if the user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/categories/{categoryId} {
      // Definition of `isOwner` function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Definition of `isExistingOwner` function
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants owner-only access to user-specific user profiles.
     * @path /users/{userId}/userProfiles/{profileId}
     * @allow (create, update, delete) if the user is the owner of the profile.
     * @allow (get, list) if the user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/userProfiles/{profileId} {
      // Definition of `isOwner` function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Definition of `isExistingOwner` function
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants owner-only access to user-specific invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create, update, delete) if the user is the owner of the invoice.
     * @allow (get, list) if the user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      // Definition of `isOwner` function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Definition of `isExistingOwner` function
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants owner-only access to user-specific units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create, update, delete) if the user is the owner of the unit.
     * @allow (get, list) if the user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/units/{unitId} {
      // Definition of `isOwner` function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Definition of `isExistingOwner` function
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants owner-only access to user-specific toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create, update, delete) if the user is the owner of the settings.
     * @allow (get) if the user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/settings/toolbarPositions {
      // Definition of `isOwner` function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Definition of `isExistingOwner` function
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing not supported for single documents
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to visitor logs, but restricts writes.
     * @path /visitorLogs/{logId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access for analytics, but protects data integrity by restricting writes.
     */
    match /visitorLogs/{logId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}