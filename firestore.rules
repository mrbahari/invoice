/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all user-specific data
 * nested under `/users/{userId}`.  This means that only the authenticated user
 * matching the `userId` segment of the path can read or write data at that location.
 * Top-level collections, such as `/visitorLogs`, may have different access control.
 *
 * Data Structure:
 * The Firestore database is organized with user-specific data nested under the
 * `/users/{userId}` path.  Each user has their own collections for stores,
 * products, categories, profiles, invoices and units.
 * There is also settings under `/users/{userId}/settings/toolbarPositions`.
 * The `visitorLogs` collection exists at the top level.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and only accessible to the owning user.
 * - Listing of user subcollections is allowed for the owner.
 * - The `visitorLogs` collection allows public read access and requires
 *   authentication for write access. The `userId` field must match the
 *   authenticated user's UID if a user is logged in, otherwise it must be null.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` calls in security rules, the rules rely on the assumption
 * that the `userId` can be extracted from the path and is equal to `request.auth.uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for collections under /users/{userId}.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) User xHYjOZByDvVoCdllW9YbyGU9ZKb2 can create a new store document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/stores/ with valid data.
     * @deny (create) User anotherUser cannot create a store document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/stores/.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for collections under /users/{userId}.
     * @path /users/{userId}/products/{productId}
     * @allow (create) User xHYjOZByDvVoCdllW9YbyGU9ZKb2 can create a new product document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/products/ with valid data.
     * @deny (create) User anotherUser cannot create a product document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/products/.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for collections under /users/{userId}.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User xHYjOZByDvVoCdllW9YbyGU9ZKb2 can create a new category document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/categories/ with valid data.
     * @deny (create) User anotherUser cannot create a category document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/categories/.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for collections under /users/{userId}.
     * @path /users/{userId}/userProfiles/{profileId}
     * @allow (create) User xHYjOZByDvVoCdllW9YbyGU9ZKb2 can create a new user profile document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/userProfiles/ with valid data.
     * @deny (create) User anotherUser cannot create a user profile document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/userProfiles/.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userProfiles/{profileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for collections under /users/{userId}.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) User xHYjOZByDvVoCdllW9YbyGU9ZKb2 can create a new invoice document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/invoices/ with valid data.
     * @deny (create) User anotherUser cannot create a invoice document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/invoices/.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for collections under /users/{userId}.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) User xHYjOZByDvVoCdllW9YbyGU9ZKb2 can create a new unit document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/units/ with valid data.
     * @deny (create) User anotherUser cannot create a unit document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/units/.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for settings document under /users/{userId}/settings/toolbarPositions.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create) User xHYjOZByDvVoCdllW9YbyGU9ZKb2 can create a new settings document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/settings/toolbarPositions with valid data.
     * @deny (create) User anotherUser cannot create a settings document under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/settings/toolbarPositions.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read and authenticated writes for visitor logs. If a user is logged in, the userId field must match the authenticated user's UID.
     * @path /visitorLogs/{logId}
     * @allow (get) Any user can read a visitor log.
     * @allow (list) Any user can list visitor logs.
     * @allow (create) An authenticated user can create a visitor log.  If authenticated, the `userId` field must match the user's UID.
     * @allow (update) An authenticated user can update a visitor log.  If authenticated, the `userId` field must match the user's UID.
     * @allow (delete) An authenticated user can delete a visitor log.  If authenticated, the `userId` field must match the user's UID.
     * @principle Allows public read access with owner-only writes.  Requires `userId` to match `auth.uid` on writes if the user is signed in.
     */
    match /visitorLogs/{logId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && (request.resource.data.userId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.userId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.userId == request.auth.uid);
    }
  }
}