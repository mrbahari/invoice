/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a combination of public read access with owner-only write access for certain collections (e.g., /products, /categories, /stores) and strict user-ownership for user-specific subcollections (e.g., /users/{userId}/clients, /users/{userId}/invoices, /users/{userId}/units).
 * @data_structure Data is organized into top-level collections (e.g., /products, /categories, /stores) and user-specific subcollections under /users/{userId}.
 * @key_security_decisions
 *   - Public listing is enabled for /products, /categories, and /stores.
 *   - User listing is disallowed.
 *   - Write access to /products, /categories, and /stores is restricted to the owner specified in the 'ownerId' field.
 *   - All data under /users/{userId} is strictly controlled by the respective user.
 * @denormalization_for_authorization The 'Product', 'Category', and 'Store' entities require an 'ownerId' or similar field to properly enforce owner-only writes.
 * @structural_segregation User-specific data is stored in private subcollections under /users/{userId}, separate from public top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to all products, but restricts creation, updates, and deletion to the owner.
     * @path /products/{productId}
     * @allow (get, list)
     * @allow (create) - Example: User with UID 'user123' can create a product if request.resource.data.ownerId == 'user123'.
     * @deny (create) - Example: User with UID 'user123' cannot create a product if request.resource.data.ownerId != 'user123'.
     * @allow (update, delete) - Example: User with UID 'user123' can update/delete a product if resource.data.ownerId == 'user123' and the product exists.
     * @deny (update, delete) - Example: User with UID 'user123' cannot update/delete a product if resource.data.ownerId != 'user123' or the product does not exist.
     * @principle Allows public reads, but enforces document ownership for writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows public read access to all categories, but restricts creation, updates, and deletion to the owner.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @allow (create) - Example: User with UID 'user123' can create a category if request.resource.data.ownerId == 'user123'.
     * @deny (create) - Example: User with UID 'user123' cannot create a category if request.resource.data.ownerId != 'user123'.
     * @allow (update, delete) - Example: User with UID 'user123' can update/delete a category if resource.data.ownerId == 'user123' and the category exists.
     * @deny (update, delete) - Example: User with UID 'user123' cannot update/delete a category if resource.data.ownerId != 'user123' or the category does not exist.
     * @principle Allows public reads, but enforces document ownership for writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows public read access to all stores, but restricts creation, updates, and deletion to the owner.
     * @path /stores/{storeId}
     * @allow (get, list)
     * @allow (create) - Example: User with UID 'user123' can create a store if request.resource.data.ownerId == 'user123'.
     * @deny (create) - Example: User with UID 'user123' cannot create a store if request.resource.data.ownerId != 'user123'.
     * @allow (update, delete) - Example: User with UID 'user123' can update/delete a store if resource.data.ownerId == 'user123' and the store exists.
     * @deny (update, delete) - Example: User with UID 'user123' cannot update/delete a store if resource.data.ownerId != 'user123' or the store does not exist.
     * @principle Allows public reads, but enforces document ownership for writes.
     */
    match /stores/{storeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows a user to manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list) - Example: User with UID 'user123' can get/list their own clients.
     * @deny (get, list) - Example: User with UID 'user123' cannot get/list clients of user 'user456'.
     * @allow (create, update, delete) - Example: User with UID 'user123' can create/update/delete a client if they own it and it exists.
     * @deny (create, update, delete) - Example: User with UID 'user123' cannot create/update/delete a client if they do not own it or it does not exist.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to manage their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list) - Example: User with UID 'user123' can get/list their own invoices.
     * @deny (get, list) - Example: User with UID 'user123' cannot get/list invoices of user 'user456'.
     * @allow (create, update, delete) - Example: User with UID 'user123' can create/update/delete an invoice if they own it and it exists.
     * @deny (create, update, delete) - Example: User with UID 'user123' cannot create/update/delete an invoice if they do not own it or it does not exist.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to manage their own units.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list) - Example: User with UID 'user123' can get/list their own units.
     * @deny (get, list) - Example: User with UID 'user123' cannot get/list units of user 'user456'.
     * @allow (create, update, delete) - Example: User with UID 'user123' can create/update/delete a unit if they own it and it exists.
     * @deny (create, update, delete) - Example: User with UID 'user123' cannot create/update/delete a unit if they do not own it or it does not exist.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to manage their own toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get, list) - Example: User with UID 'user123' can get/list their own toolbar settings.
     * @deny (get, list) - Example: User with UID 'user123' cannot get/list toolbar settings of user 'user456'.
     * @allow (create, update, delete) - Example: User with UID 'user123' can create/update/delete their own toolbar settings if they own it and it exists.
     * @deny (create, update, delete) - Example: User with UID 'user123' cannot create/update/delete toolbar settings if they do not own it or it does not exist.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }
}