rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories, but restricts writes to authenticated users.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Allows anyone to read products, but restricts writes.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for writes, self-creation for create.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

        /**
     * @description Allows a user to manage their own stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own units.
     * @path /users/{userId}/units/{unitId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}