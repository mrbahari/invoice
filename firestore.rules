/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, where each user can only access data under their own user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which segregates data per user.
 * - /users/{userId}/stores/{storeId}: Stores owned by the user.
 * - /users/{userId}/products/{productId}: Products owned by the user.
 * - /users/{userId}/categories/{categoryId}: Categories owned by the user.
 * - /users/{userId}/clients/{clientId}: Clients owned by the user.
 * - /users/{userId}/invoices/{invoiceId}: Invoices owned by the user.
 * - /users/{userId}/units/{unitId}: Units owned by the user.
 * - /users/{userId}/settings/toolbarPositions: User-specific settings.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All data is private and requires authentication.
 * - Each collection enforces owner-only access for create, update, and delete operations.
 * - `get` and `list` operations are allowed only to the owner.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the user ID being present in the path (/users/{userId}) to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the user is the owner of the existing document
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user-specific stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) User 'user123' can create a store with ID 'store456' under their user ID.
     * @allow (update) User 'user123' can update store 'store456' under their user ID.
     * @allow (delete) User 'user123' can delete store 'store456' under their user ID.
     * @deny (create) User 'user456' cannot create a store under user ID 'user123'.
     * @deny (update) User 'user456' cannot update store 'store456' under user ID 'user123'.
     * @deny (delete) User 'user456' cannot delete store 'store456' under user ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) User 'user123' can create a product with ID 'product456' under their user ID.
     * @allow (update) User 'user123' can update product 'product456' under their user ID.
     * @allow (delete) User 'user123' can delete product 'product456' under their user ID.
     * @deny (create) User 'user456' cannot create a product under user ID 'user123'.
     * @deny (update) User 'user456' cannot update product 'product456' under user ID 'user123'.
     * @deny (delete) User 'user456' cannot delete product 'product456' under user ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/products/{productId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User 'user123' can create a category with ID 'category456' under their user ID.
     * @allow (update) User 'user123' can update category 'category456' under their user ID.
     * @allow (delete) User 'user123' can delete category 'category456' under their user ID.
     * @deny (create) User 'user456' cannot create a category under user ID 'user123'.
     * @deny (update) User 'user456' cannot update category 'category456' under user ID 'user123'.
     * @deny (delete) User 'user456' cannot delete category 'category456' under user ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User 'user123' can create a client with ID 'client456' under their user ID.
     * @allow (update) User 'user123' can update client 'client456' under their user ID.
     * @allow (delete) User 'user123' can delete client 'client456' under their user ID.
     * @deny (create) User 'user456' cannot create a client under user ID 'user123'.
     * @deny (update) User 'user456' cannot update client 'client456' under user ID 'user123'.
     * @deny (delete) User 'user456' cannot delete client 'client456' under user ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) User 'user123' can create a invoice with ID 'invoice456' under their user ID.
     * @allow (update) User 'user123' can update invoice 'invoice456' under their user ID.
     * @allow (delete) User 'user123' can delete invoice 'invoice456' under their user ID.
     * @deny (create) User 'user456' cannot create a invoice under user ID 'user123'.
     * @deny (update) User 'user456' cannot update invoice 'invoice456' under user ID 'user123'.
     * @deny (delete) User 'user456' cannot delete invoice 'invoice456' under user ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) User 'user123' can create a unit with ID 'unit456' under their user ID.
     * @allow (update) User 'user123' can update unit 'unit456' under their user ID.
     * @allow (delete) User 'user123' can delete unit 'unit456' under their user ID.
     * @deny (create) User 'user456' cannot create a unit under user ID 'user123'.
     * @deny (update) User 'user456' cannot update unit 'unit456' under user ID 'user123'.
     * @deny (delete) User 'user456' cannot delete unit 'unit456' under user ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Stores settings for a user, like toolbar positions.
      * @path /users/{userId}/settings/toolbarPositions
      * @allow (create) User 'user123' can create toolbar positions under their user ID.
      * @allow (update) User 'user123' can update toolbar positions under their user ID.
      * @allow (delete) User 'user123' can delete toolbar positions under their user ID.
      * @deny (create) User 'user456' cannot create toolbar positions under user ID 'user123'.
      * @deny (update) User 'user456' cannot update toolbar positions under user ID 'user123'.
      * @deny (delete) User 'user456' cannot delete toolbar positions under user ID 'user123'.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/settings/toolbarPositions {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}