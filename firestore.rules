/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to products and categories.
 *
 * Data Structure:
 * - Products and categories are stored in top-level collections (`/products/{productId}`, `/categories/{categoryId}`) with public read access.
 * - All other data (clients, invoices, stores, units, settings) is nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User data is strictly segregated by UID, preventing unauthorized access.
 * - Public read access is granted to products and categories, but write access is restricted to authenticated users.
 * - The `toolbarPositions` document is treated as a user-specific setting and is secured accordingly.
 * - Data validation is limited to authorization-critical fields to allow for rapid schema iteration.
 * - List operations for user-scoped subcollections are only allowed for the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to all products. Only authenticated users can create, update, or delete products,
     *              but they must set the storeId to their own store ID.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn(); // TODO: Add storeId validation once the schema is updated with an ownership field.
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires 'storeId' field)
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add storeId validation once the schema is updated with an ownership field.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to all categories. Only authenticated users can create, update, or delete categories,
     *              but they must set the storeId to their own store ID.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn(); // TODO: Add storeId validation once the schema is updated with an ownership field.
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires 'storeId' field)
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add storeId validation once the schema is updated with an ownership field.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces strict user-ownership for client documents. Only the owner can create, read, update, or delete.
     * @path /users/{userId}/clients/{clientId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == clientId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Strict user-ownership
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == clientId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for invoice documents. Only the owner can create, read, update, or delete.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == invoiceId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Strict user-ownership
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == invoiceId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for store documents. Only the owner can create, read, update, or delete.
     * @path /users/{userId}/stores/{storeId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == storeId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Strict user-ownership
     */
    match /users/{userId}/stores/{storeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == storeId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for unit documents. Only the owner can create, read, update, or delete.
     * @path /users/{userId}/units/{unitId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == unitId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Strict user-ownership
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == unitId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for toolbar settings. Only the owner can create, read, update, or delete.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Strict user-ownership
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the existing document
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}