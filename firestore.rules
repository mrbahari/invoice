/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and
 * controlled access to data. It leverages Firebase Authentication to
 * verify user identity and authorize requests based on user roles and
 * document ownership. The rules are designed to prevent unauthorized
 * data access and modification.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level collections, making them
 *   potentially publicly readable, but only modifiable by authorized users
 *   who own the data.
 * - User-specific data, such as clients, invoices, stores, units, and settings,
 *   is stored under the `/users/{userId}` path, ensuring that only the
 *   authenticated user can access their own data.
 *
 * Key Security Decisions:
 * - Public Read, Owner-Only Write for Products and Categories:  These
 *   collections are designed to be publicly readable, but modifications
 *   (create, update, delete) are restricted to the owner of the document.
 *   Each document must have an `ownerId` or similar field that matches the
 *   authenticated user's UID.
 * - Strict User Ownership: All data under `/users/{userId}` is strictly
 *   owned by the user identified by `{userId}`. Only the authenticated user
 *   with a matching UID can read or write to this data.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 *  - The 'products' and 'categories' collections require a 'storeId' field to check authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read a product, but only the owner can create, update, or delete it.
     * @path /products/{productId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.storeId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && resource.data.storeId == request.auth.uid
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null
     * @deny (create) if request.resource.data.storeId != request.auth.uid
     * @deny (update, delete) if resource.data.storeId != request.auth.uid
     * @principle Public read, owner-only write. Enforces document ownership for writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.storeId);
    }

    /**
     * @description Allows anyone to read a category, but only the owner can create, update, or delete it.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.storeId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && resource.data.storeId == request.auth.uid
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null
     * @deny (create) if request.resource.data.storeId != request.auth.uid
     * @deny (update, delete) if resource.data.storeId != request.auth.uid
     * @principle Public read, owner-only write. Enforces document ownership for writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.storeId);
    }

    /**
     * @description Enforces strict user-ownership for clients. Only the authenticated user can access their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == userId && resource != null
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for invoices. Only the authenticated user can access their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == userId && resource != null
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for stores. Only the authenticated user can access their own stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == userId && resource != null
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for units. Only the authenticated user can access their own units.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == userId && resource != null
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict user-ownership for toolbar settings. Only the authenticated user can access their own settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get) if request.auth.uid == userId
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (get) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/toolbarPositions {
       allow get: if isOwner(userId);
       allow create: if isOwner(userId);
       allow update: if isExistingOwner(userId);
       allow delete: if isExistingOwner(userId);
       allow list: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user ID matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID and the resource exists.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user ID matches the authenticated user's UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}