/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and read/write constraints.
 * Data is organized hierarchically under user-specific paths where applicable, ensuring
 * users can only access their own data unless explicitly allowed otherwise.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level collections for public read access.
 * - User-specific data (clients, invoices, stores, units, settings) is nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Public read access is granted for the top-level "products" and "categories" collections to support catalog browsing.
 * - User listing is generally disallowed for privacy and security reasons.
 * - Write access to "products" is not permitted, acting as a read-only public catalog.
 * - All user-specific data is strictly controlled by user ID.
 *
 * Denormalization for Authorization: N/A
 * This ruleset does not currently use denormalization, but future iterations should
 * consider adding `ownerId` fields to documents where ownership needs to be explicitly validated,
 * particularly in the context of public read access with owner-only writes.
 *
 * Structural Segregation:
 * Public data (products, categories) is segregated from private user data using top-level collections
 * versus user subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to products, but restricts all writes.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No user can create, update, or delete products.
     * @principle Allows public read, but restricts all writes to ensure data integrity.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to categories, but restricts all writes.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No user can create, update, or delete categories.
     * @principle Allows public read, but restricts all writes to ensure data integrity.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profile data with owner-only access.
     * @path /users/{userId}
     * @allow (create): Only the user with matching {userId} can create their own profile.
     * @allow (get, update, delete): Only the user with matching {userId} can read, update, or delete their own profile.
     * @deny (list): User listing is prohibited for privacy.
     * @deny: Operations from other users are rejected.
     * @principle Enforces strict user ownership for profile management.
     */
    match /users/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if request.auth.uid == userId;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);

        match /{document=**} {
          allow read: if isOwner(userId);
          allow write: if isOwner(userId);
        }
    }

  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isSignedIn() {
    return request.auth != null;
  }
}