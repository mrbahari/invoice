/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to visitor logs.
 *
 * Data Structure:
 * - All user-related data (stores, products, categories, profiles, invoices, units, settings)
 *   is nested under `/users/{userId}`.
 * - Visitor logs are stored in the top-level `/visitorLogs` collection.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - User listing is disallowed.
 * - Visitor logs are publicly readable but only the server can create them.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` path segment against the `request.auth.uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     * Rules for user-specific stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) A user can create a store under their own user ID.
     * @allow (update) A user can update a store under their own user ID if they are the owner and the document exists.
     * @allow (delete) A user can delete a store under their own user ID if they are the owner and the document exists.
     * @deny (create) A user cannot create a store under another user's ID.
     * @deny (update) A user cannot update a store under another user's ID.
     * @deny (delete) A user cannot delete a store under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for user-specific products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) A user can create a product under their own user ID.
     * @allow (update) A user can update a product under their own user ID if they are the owner and the document exists.
     * @allow (delete) A user can delete a product under their own user ID if they are the owner and the document exists.
     * @deny (create) A user cannot create a product under another user's ID.
     * @deny (update) A user cannot update a product under another user's ID.
     * @deny (delete) A user cannot delete a product under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for user-specific categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) A user can create a category under their own user ID.
     * @allow (update) A user can update a category under their own user ID if they are the owner and the document exists.
     * @allow (delete) A user can delete a category under their own user ID if they are the owner and the document exists.
     * @deny (create) A user cannot create a category under another user's ID.
     * @deny (update) A user cannot update a category under another user's ID.
     * @deny (delete) A user cannot delete a category under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for user-specific user profiles.
     * @path /users/{userId}/userProfiles/{profileId}
     * @allow (create) A user can create a user profile under their own user ID.
     * @allow (update) A user can update their own profile, and userId and profileId must match.
     * @allow (delete) A user can delete their own profile.
     * @deny (create) A user cannot create a profile under another user's ID.
     * @deny (update) A user cannot update another user's profile.
     * @deny (delete) A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/userProfiles/{profileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for user-specific invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) A user can create an invoice under their own user ID.
     * @allow (update) A user can update an invoice under their own user ID if they are the owner and the document exists.
     * @allow (delete) A user can delete an invoice under their own user ID if they are the owner and the document exists.
     * @deny (create) A user cannot create an invoice under another user's ID.
     * @deny (update) A user cannot update an invoice under another user's ID.
     * @deny (delete) A user cannot delete an invoice under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for user-specific units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) A user can create a unit under their own user ID.
     * @allow (update) A user can update a unit under their own user ID if they are the owner and the document exists.
     * @allow (delete) A user can delete a unit under their own user ID if they are the owner and the document exists.
     * @deny (create) A user cannot create a unit under another user's ID.
     * @deny (update) A user cannot update a unit under another user's ID.
     * @deny (delete) A user cannot delete a unit under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for user-specific toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create) A user can create toolbar settings under their own user ID.
     * @allow (update) A user can update toolbar settings under their own user ID if they are the owner and the document exists.
     * @allow (delete) A user can delete toolbar settings under their own user ID if they are the owner and the document exists.
     * @deny (create) A user cannot create toolbar settings under another user's ID.
     * @deny (update) A user cannot update toolbar settings under another user's ID.
     * @deny (delete) A user cannot delete toolbar settings under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for visitor logs.  Logs are publicly readable, but only the backend can create, update, or delete them.
     * @path /visitorLogs/{logId}
     * @allow (get) All users, signed in or not, can read visitor logs.
     * @allow (list) All users, signed in or not, can list visitor logs.
     * @deny (create) Only the backend can create visitor logs.
     * @deny (update) Only the backend can update visitor logs.
     * @deny (delete) Only the backend can delete visitor logs.
     * @principle Allows public read access but restricts write access to the server.
     */
    match /visitorLogs/{logId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add server-only validation using custom claims
      allow update: if false; // TODO: Add server-only validation using custom claims
      allow delete: if false; // TODO: Add server-only validation using custom claims
    }
  }
}