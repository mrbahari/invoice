/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to products and categories.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level collections with public read access.
 * - All other data (clients, invoices, stores, units, toolbar settings) are nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data under `/users/{userId}`.
 * - Public read access is granted to `/products` and `/categories`.
 * - Users are not allowed to list all users.
 * - The data schema is not strictly enforced in this prototyping phase to allow for rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to all products. Only the owner can modify products.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read the products.
     * @deny (create, update, delete): Only the owner can modify products. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only write (if ownership field exists).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to all categories. Only the owner can modify categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read the categories.
     * @deny (create, update, delete): Only the owner can modify categories. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only write (if ownership field exists).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces that only the owner can read, write, update, or delete their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list): Allows the owner to read their clients.
     * @allow (create): Allows the owner to create clients.
     * @allow (update): Allows the owner to update their clients.
     * @allow (delete): Allows the owner to delete their clients.
     * @deny: Denies access to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the owner can read, write, update, or delete their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list): Allows the owner to read their invoices.
     * @allow (create): Allows the owner to create invoices.
     * @allow (update): Allows the owner to update their invoices.
     * @allow (delete): Allows the owner to delete their invoices.
     * @deny: Denies access to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the owner can read, write, update, or delete their own stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (get, list): Allows the owner to read their stores.
     * @allow (create): Allows the owner to create stores.
     * @allow (update): Allows the owner to update their stores.
     * @allow (delete): Allows the owner to delete their stores.
     * @deny: Denies access to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the owner can read, write, update, or delete their own units.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list): Allows the owner to read their units.
     * @allow (create): Allows the owner to create units.
     * @allow (update): Allows the owner to update their units.
     * @allow (delete): Allows the owner to delete their units.
     * @deny: Denies access to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the owner can read, write, update, or delete their own toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get): Allows the owner to read their toolbar positions.
     * @allow (list): Allows the owner to list their toolbar positions.
     * @allow (create): Allows the owner to create their toolbar positions.
     * @allow (update): Allows the owner to update their toolbar positions.
     * @allow (delete): Allows the owner to delete their toolbar positions.
     * @deny: Denies access to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && userId == request.auth.uid;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is the owner of the existing document, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}