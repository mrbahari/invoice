/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict ownership model for user-specific data
 * while allowing public read access to certain collections like 'products' and 'categories'.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level collections with public read access and owner-only writes.
 * - User-specific data (clients, invoices, units, settings) is stored under the /users/{userId} path.
 * - Stores are stored in a top-level collection with public read access and owner-only writes.
 *
 * Key Security Decisions:
 * - Users can only manage data under their own /users/{userId} path.
 * - Listing other users' data is strictly forbidden.
 * - Public collections (products, categories, stores) are readable by all, but only the owner can create, update, or delete documents.
 *
 * Denormalization for Authorization:
 * - Products, Categories, and Stores require the `ownerId` field within the document to match `request.auth.uid` for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Publicly readable collection of all products. Owner can create, update and delete.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read product information.
     * @allow (create): User with auth.uid "user123" can create a product with product.ownerId = "user123".
     * @allow (update, delete): User with auth.uid "user123" can update/delete a product if product.ownerId = "user123".
     * @deny (create): User with auth.uid "user123" cannot create a product with product.ownerId = "user456".
     * @deny (update, delete): User with auth.uid "user123" cannot update/delete a product if product.ownerId = "user456".
     * @principle Allows public read access, but restricts writes to the owner specified in the 'ownerId' field.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Publicly readable collection of all categories. Owner can create, update and delete.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read category information.
     * @allow (create): User with auth.uid "user123" can create a category with category.ownerId = "user123".
     * @allow (update, delete): User with auth.uid "user123" can update/delete a category if category.ownerId = "user123".
     * @deny (create): User with auth.uid "user123" cannot create a category with category.ownerId = "user456".
     * @deny (update, delete): User with auth.uid "user123" cannot update/delete a category if category.ownerId = "user456".
     * @principle Allows public read access, but restricts writes to the owner specified in the 'ownerId' field.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

     /**
     * @description Public collection of stores. Owner can create, update and delete.
     * @path /stores/{storeId}
     * @allow (get, list): Anyone can read store information.
     * @allow (create): User with auth.uid "user123" can create a store with store.ownerId = "user123".
     * @allow (update, delete): User with auth.uid "user123" can update/delete a store if store.ownerId = "user123".
     * @deny (create): User with auth.uid "user123" cannot create a store with store.ownerId = "user456".
     * @deny (update, delete): User with auth.uid "user123" cannot update/delete a store if store.ownerId = "user456".
     * @principle Allows public read access, but restricts writes to the owner specified in the 'ownerId' field.
     */
    match /stores/{storeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description User-specific collection of clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list): Only the owner (the user with the matching userId) can read the clients.
     * @allow (create): Only the owner can create a client.
     * @allow (update, delete): Only the owner can update or delete a client.
     * @deny (create): User with auth.uid "user123" cannot create a client under /users/user456/.
     * @deny (update, delete): User with auth.uid "user123" cannot update/delete a client under /users/user456/.
     * @principle Restricts access to a user's own data tree, enforcing document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list): Only the owner (the user with the matching userId) can read the invoices.
     * @allow (create): Only the owner can create an invoice.
     * @allow (update, delete): Only the owner can update or delete an invoice.
     * @deny (create): User with auth.uid "user123" cannot create an invoice under /users/user456/.
     * @deny (update, delete): User with auth.uid "user123" cannot update/delete an invoice under /users/user456/.
     * @principle Restricts access to a user's own data tree, enforcing document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of measurement units.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list): Only the owner (the user with the matching userId) can read the units.
     * @allow (create): Only the owner can create a unit.
     * @allow (update, delete): Only the owner can update or delete a unit.
     * @deny (create): User with auth.uid "user123" cannot create a unit under /users/user456/.
     * @deny (update, delete): User with auth.uid "user123" cannot update/delete a unit under /users/user456/.
     * @principle Restricts access to a user's own data tree, enforcing document ownership for all operations.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores settings for a user, like toolbar positions.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get, list): Only the owner (the user with the matching userId) can read their settings.
     * @allow (create): Only the owner can create their settings document.
     * @allow (update, delete): Only the owner can update or delete their settings.
     * @deny (create): User with auth.uid "user123" cannot create settings under /users/user456/.
     * @deny (update, delete): User with auth.uid "user123" cannot update/delete settings under /users/user456/.
     * @principle Restricts access to a user's own data tree, enforcing document ownership for all operations.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}