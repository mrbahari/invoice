/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model where each user can only
 * access data explicitly associated with their user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a private data tree for each user.
 * Within each user's data tree, there are collections for stores, products,
 * categories, clients, invoices, units, and settings.
 *
 * Key Security Decisions:
 * - All data is private to the user. There are no shared or public collections.
 * - User listing is disallowed to prevent enumeration attacks.
 * - Strong ownership validation is enforced on all write operations.
 *
 * Denormalization for Authorization:
 * No denormalization is necessary in this ruleset, as all authorization decisions
 * are based on the user ID, which is already present in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the given userId matches the authenticated user's ID.
     * @param {string} userId - The user ID to check.
     * @returns {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the given userId matches the authenticated user's ID and the resource exists.
     * @param {string} userId - The user ID to check.
     * @returns {boolean} True if the user ID matches the authenticated user's ID and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
    
    /**
     * @description
     * Protects the root `/users` collection and prevents listing.
     * This prevents potential enumeration attacks and ensures user privacy.
     * @path /users
     * @allow (get) A request to get a specific user document.
     * @deny (list) A request to list all user documents.
     * @principle Prevents user enumeration and protects user privacy.
     */
    match /users {
      allow get: if false;
      allow list: if false;
    }

    /**
     * @description
     * Enforces strict user-ownership for all documents under `/users/{userId}`.
     * This ensures that only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) A user can create their own document if the userId matches their auth UID.
     * @allow (get) A user can read their own document.
     * @allow (update) A user can update their own document.
     * @allow (delete) A user can delete their own document.
     * @deny (create) A user cannot create a document for another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Enforces strict user-ownership for stores under `/users/{userId}/stores/{storeId}`.
     * Only the authenticated user can create, read, update, or delete their own stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) A user can create a store if the userId matches their auth UID.
     * @allow (get) A user can read their own store.
     * @allow (update) A user can update their own store.
     * @allow (delete) A user can delete their own store.
     * @deny (create) A user cannot create a store for another user.
     * @deny (update) A user cannot update another user's store.
     * @principle Enforces document ownership for all operations on stores.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Enforces strict user-ownership for products under `/users/{userId}/products/{productId}`.
     * Only the authenticated user can create, read, update, or delete their own products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) A user can create a product if the userId matches their auth UID.
     * @allow (get) A user can read their own product.
     * @allow (update) A user can update their own product.
     * @allow (delete) A user can delete their own product.
     * @deny (create) A user cannot create a product for another user.
     * @deny (update) A user cannot update another user's product.
     * @principle Enforces document ownership for all operations on products.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Enforces strict user-ownership for categories under `/users/{userId}/categories/{categoryId}`.
     * Only the authenticated user can create, read, update, or delete their own categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) A user can create a category if the userId matches their auth UID.
     * @allow (get) A user can read their own category.
     * @allow (update) A user can update their own category.
     * @allow (delete) A user can delete their own category.
     * @deny (create) A user cannot create a category for another user.
     * @deny (update) A user cannot update another user's category.
     * @principle Enforces document ownership for all operations on categories.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Enforces strict user-ownership for clients under `/users/{userId}/clients/{clientId}`.
     * Only the authenticated user can create, read, update, or delete their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) A user can create a client if the userId matches their auth UID.
     * @allow (get) A user can read their own client.
     * @allow (update) A user can update their own client.
     * @allow (delete) A user can delete their own client.
     * @deny (create) A user cannot create a client for another user.
     * @deny (update) A user cannot update another user's client.
     * @principle Enforces document ownership for all operations on clients.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Enforces strict user-ownership for invoices under `/users/{userId}/invoices/{invoiceId}`.
     * Only the authenticated user can create, read, update, or delete their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) A user can create an invoice if the userId matches their auth UID.
     * @allow (get) A user can read their own invoice.
     * @allow (update) A user can update their own invoice.
     * @allow (delete) A user can delete their own invoice.
     * @deny (create) A user cannot create an invoice for another user.
     * @deny (update) A user cannot update another user's invoice.
     * @principle Enforces document ownership for all operations on invoices.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Enforces strict user-ownership for units under `/users/{userId}/units/{unitId}`.
     * Only the authenticated user can create, read, update, or delete their own units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) A user can create a unit if the userId matches their auth UID.
     * @allow (get) A user can read their own unit.
     * @allow (update) A user can update their own unit.
     * @allow (delete) A user can delete their own unit.
     * @deny (create) A user cannot create a unit for another user.
     * @deny (update) A user cannot update another user's unit.
     * @principle Enforces document ownership for all operations on units.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Enforces strict user-ownership for settings under `/users/{userId}/settings/toolbarPositions`.
     * Only the authenticated user can create, read, update, or delete their own settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create) A user can create settings if the userId matches their auth UID.
     * @allow (get) A user can read their own settings.
     * @allow (update) A user can update their own settings.
     * @allow (delete) A user can delete their own settings.
     * @deny (create) A user cannot create settings for another user.
     * @deny (update) A user cannot update another user's settings.
     * @principle Enforces document ownership for all operations on settings.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}