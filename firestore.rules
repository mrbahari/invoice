rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a strict user-ownership model for private user data while allowing public reads for product and category information.
     * @dataStructure
     * - /products/{productId}: Public product catalog.
     * - /categories/{categoryId}: Public category list.
     * - /users/{userId}/clients/{clientId}: Private client list for each user.
     * - /users/{userId}/invoices/{invoiceId}: Private invoices for each user.
     * - /users/{userId}/stores/{storeId}: Private stores owned by each user.
     * - /users/{userId}/units/{unitId}: Private units for each user.
     * - /users/{userId}/settings/toolbarPositions: Private settings for each user.
     * @keySecurityDecisions
     * - Products and Categories are publicly readable but not writable through security rules. Backend services or a privileged client are required to update these.
     * - Users can only access their own clients, invoices, stores, and units.
     * - Listing all users is disallowed.
     */

    /**
     * @description Allows anyone to read product information. Writes are not permitted.
     * @path /products/{productId}
     * @allow (get, list) Authenticated or unauthenticated user can read product.
     * @deny (create, update, delete) No one can create, update, or delete a product via direct client access.
     * @principle Public read-only access to product data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read category information. Writes are not permitted.
     * @path /categories/{categoryId}
     * @allow (get, list) Authenticated or unauthenticated user can read category.
     * @deny (create, update, delete) No one can create, update, or delete a category via direct client access.
     * @principle Public read-only access to category data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to a user's own client documents.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create, get, list) Authenticated user can create, get and list their own client documents.
     * @allow (update, delete) Authenticated user can update or delete their own existing client documents.
     * @deny (create, get, list, update, delete) Other users cannot access these client documents.
     * @principle Enforces document ownership for client data.
     */
    match /users/{userId}/clients/{clientId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's own invoice documents.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create, get, list) Authenticated user can create, get, and list their own invoice documents.
     * @allow (update, delete) Authenticated user can update or delete their own existing invoice documents.
     * @deny (create, get, list, update, delete) Other users cannot access these invoice documents.
     * @principle Enforces document ownership for invoice data.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's own store documents.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create, get, list) Authenticated user can create, get, and list their own store documents.
     * @allow (update, delete) Authenticated user can update or delete their own existing store documents.
     * @deny (create, get, list, update, delete) Other users cannot access these store documents.
     * @principle Enforces document ownership for store data.
     */
    match /users/{userId}/stores/{storeId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's own unit documents.
     * @path /users/{userId}/units/{unitId}
     * @allow (create, get, list) Authenticated user can create, get, and list their own unit documents.
     * @allow (update, delete) Authenticated user can update or delete their own existing unit documents.
     * @deny (create, get, list, update, delete) Other users cannot access these unit documents.
     * @principle Enforces document ownership for unit data.
     */
    match /users/{userId}/units/{unitId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create, get) Authenticated user can create and get their own settings.
     * @allow (update, delete) Authenticated user can update or delete their own settings.
     * @deny (create, get, update, delete) Other users cannot access these settings.
     * @principle Enforces document ownership for user settings data.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow read, get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false; // Listing is not allowed for single documents
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}