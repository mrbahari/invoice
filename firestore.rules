/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated
 * data tree under `/users/{userId}` and can only access data within their own tree.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, creating a clear separation of
 * user data.  Each user has collections for stores, products, categories,
 * clients, invoices and units. A single document `toolbarPositions` exists under
 * `/users/{userId}/settings`.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data access.
 * - All write operations are strictly validated against the authenticated user's ID
 *   to prevent data spoofing or modification by other users.
 * - The rules do not enforce specific schema validation (data types, required fields)
 *   to allow for rapid prototyping and flexible data shapes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user ID matches the requested user ID.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    //Helper function to check if the authenticated user ID matches the requested user ID and the document exists.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (read,write) if the user is the owner of the document.
     * @deny (read,write) if the user is not the owner of the document.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/stores/{storeId} collection.
     * @path /users/{userId}/stores/{storeId}
     * @allow create if the authenticated user ID matches the userId.
     * @allow read, update, delete if the authenticated user ID matches the userId and the document exists.
     * @deny create if the authenticated user ID does not match the userId.
     * @deny read, update, delete if the authenticated user ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/products/{productId} collection.
     * @path /users/{userId}/products/{productId}
     * @allow create if the authenticated user ID matches the userId.
     * @allow read, update, delete if the authenticated user ID matches the userId and the document exists.
     * @deny create if the authenticated user ID does not match the userId.
     * @deny read, update, delete if the authenticated user ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/categories/{categoryId} collection.
     * @path /users/{userId}/categories/{categoryId}
     * @allow create if the authenticated user ID matches the userId.
     * @allow read, update, delete if the authenticated user ID matches the userId and the document exists.
     * @deny create if the authenticated user ID does not match the userId.
     * @deny read, update, delete if the authenticated user ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/clients/{clientId} collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow create if the authenticated user ID matches the userId.
     * @allow read, update, delete if the authenticated user ID matches the userId and the document exists.
     * @deny create if the authenticated user ID does not match the userId.
     * @deny read, update, delete if the authenticated user ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/invoices/{invoiceId} collection.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow create if the authenticated user ID matches the userId.
     * @allow read, update, delete if the authenticated user ID matches the userId and the document exists.
     * @deny create if the authenticated user ID does not match the userId.
     * @deny read, update, delete if the authenticated user ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/units/{unitId} collection.
     * @path /users/{userId}/units/{unitId}
     * @allow create if the authenticated user ID matches the userId.
     * @allow read, update, delete if the authenticated user ID matches the userId and the document exists.
     * @deny create if the authenticated user ID does not match the userId.
     * @deny read, update, delete if the authenticated user ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/settings/toolbarPositions document.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow create if the authenticated user ID matches the userId.
     * @allow read, update, delete if the authenticated user ID matches the userId and the document exists.
     * @deny create if the authenticated user ID does not match the userId.
     * @deny read, update, delete if the authenticated user ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}