/**
 * @file Firebase Security Rules for Hisaabgar application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model. Public read access is granted to product catalogs and category data, while user-specific data (clients, invoices, user profiles) is strictly controlled by user ownership. This ensures data privacy and prevents unauthorized modifications.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores global category data. Publicly readable, writes restricted.
 * - /products/{productId}: Stores global product data. Publicly readable, writes restricted.
 * - /users/{userId}: Stores user profile data. Owner-only access.
 * - /users/{userId}/clients/{clientId}: Stores client data. Owner-only access.
 * - /users/{userId}/invoices/{invoiceId}: Stores invoice data. Owner-only access.
 *
 * Key Security Decisions:
 * - Public read access to /categories and /products is granted to allow all users to view the product catalog.
 * - User listing is denied by default for all user-scoped collections (e.g. /users, /users/{userId}/clients).
 * - All write operations on user-owned data require authentication and ownership validation.
 *
 * Denormalization for Authorization:
 *  N/A. The current structure uses path-based authorization, avoiding the need for denormalized fields.
 *
 * Structural Segregation:
 * Public and private data are separated into top-level collections (categories, products) and user-specific subcollections (clients, invoices).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to category documents and restricts write access to authenticated users.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Prevent anyone from creating categories
     * @deny update: if true; // Prevent anyone from updating categories
     * @deny delete: if true; // Prevent anyone from deleting categories
     * @principle Allows public read access but restricts writes to prevent unauthorized modifications.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product documents and restricts write access to authenticated users.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Prevent anyone from creating products
     * @deny update: if true; // Prevent anyone from updating products
     * @deny delete: if true; // Prevent anyone from deleting products
     * @principle Allows public read access but restricts writes to prevent unauthorized modifications.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny list: if true; // Prevent listing all users
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own client documents.
     * @path /users/{userId}/clients/{clientId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership and prevents unauthorized access to client data.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own invoice documents.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership and prevents unauthorized access to invoice data.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}