/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. Public collections like `products`, `categories`, and `stores` are readable by anyone, but writes are restricted to authorized users (typically the store owner). User-specific collections under `/users/{userId}` are strictly controlled, allowing only the owning user to read and write their own data.
 *
 * Data Structure:
 * - `/products/{productId}`: Public product catalog.
 * - `/categories/{categoryId}`: Public category list.
 * - `/stores/{storeId}`: Public store list. Each store document has an `ownerId` field linking it to a specific user.
 * - `/users/{userId}/clients/{clientId}`: Private client lists, accessible only to the owning user.
 * - `/users/{userId}/invoices/{invoiceId}`: Private invoice lists, accessible only to the owning user.
 * - `/users/{userId}/units/{unitId}`: Private unit lists, accessible only to the owning user.
 * - `/users/{userId}/settings/toolbarPositions`: User-specific settings.
 *
 * Key Security Decisions:
 * - Public Read Collections: Collections like `/products`, `/categories`, and `/stores` are readable by everyone. This is suitable for a product catalog or directory.
 * - Owner-Only Writes: Write access to public collections is restricted to the owner. For example, only the store owner can create, update, or delete a store.
 * - User-Scoped Data: Data under `/users/{userId}` is strictly private to the user.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - The `stores` collection denormalizes the `ownerId` field to enable efficient owner-based security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but restricts modifications to authorized users.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.storeId != null; // Anyone signed in can create a product if they specify the storeId. Further ownership rules will be applied to the store.
     * @allow update: if get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid; // Only the store owner can update products.
     * @allow delete: if get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid; // Only the store owner can delete products.
     * @principle Allows public product listing but restricts modifications to store owners.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId != null;
      allow update: if isSignedIn() && isStoreOwner(resource.data.storeId);
      allow delete: if isSignedIn() && isStoreOwner(resource.data.storeId);
    }

    /**
     * @description Allows anyone to read category information, but restricts modifications to authorized users.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.storeId != null; // Anyone signed in can create a category if they specify the storeId. Further ownership rules will be applied to the store.
     * @allow update: if get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid; // Only the store owner can update categories.
     * @allow delete: if get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid; // Only the store owner can delete categories.
     * @principle Allows public category listing but restricts modifications to store owners.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId != null;
      allow update: if isSignedIn() && isStoreOwner(resource.data.storeId);
      allow delete: if isSignedIn() && isStoreOwner(resource.data.storeId);
    }

    /**
     * @description Allows anyone to read store information, but restricts modifications to the store owner.
     * @path /stores/{storeId}
     * @allow get, list: if true;
     * @allow create: if request.auth.uid == request.resource.data.ownerId; // A user can create a store with their own ID as the ownerId.
     * @allow update: if isExistingOwner(request.auth.uid); // Only the owner can update if store exists.
     * @allow delete: if isExistingOwner(request.auth.uid); // Only the owner can delete if store exists.
     * @principle Enforces store ownership for writes.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(request.auth.uid);
      allow delete: if isSignedIn() && isExistingOwner(request.auth.uid);
    }

    /**
     * @description Allows a user to manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own units.
     * @path /users/{userId}/units/{unitId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @allow list: if false;
     * @principle Restricts access to a user's own settings.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

   function isStoreOwner(storeId) {
      return get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid;
    }
    

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}