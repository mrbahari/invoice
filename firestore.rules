/**
 * @file Firestore Security Rules for Hisaabgar application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user-specific data
 *                 (clients, invoices) stored under `/users/{userId}`. Product categories and products
 *                 are globally accessible. This design prioritizes authorization independence and clarity.
 *
 * @dataStructure
 *   - /categories/{categoryId}: Stores product categories (globally accessible).
 *   - /products/{productId}: Stores product information (globally accessible).
 *   - /users/{userId}: Stores user profile data (private to the user).
 *   - /users/{userId}/clients/{clientId}: Stores client profiles (private to the user).
 *   - /users/{userId}/invoices/{invoiceId}: Stores invoice data (private to the user).
 *
 * @keySecurityDecisions
 *   - User-specific data is stored under the `/users/{userId}` path for clear ownership.
 *   - Product categories and products are globally accessible.
 *   - Listing all users is disallowed; only the currently authenticated user can access their own data.
 *   - The rules do NOT currently validate data shapes beyond authorization requirements.
 *
 * @denormalizationForAuthorization
 *   - User-specific data is nested under `/users/{userId}` to avoid needing to denormalize user IDs
 *     into the documents themselves. The path acts as the source of truth for ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to product categories for all users.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No one can create, update, or delete categories through the client; these are managed separately.
     * @principle Allows public read access to global product catalog data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to product information for all users.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No one can create, update, or delete products through the client; these are managed separately.
     * @principle Allows public read access to global product catalog data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data.  Allows a user to read/write their own profile.
     * @path /users/{userId}
     * @allow (get, list): User can read their own profile.
     * @allow (create): User can create their own profile (self-registration).
     * @allow (update, delete): User can update and delete their own profile.
     * @deny: Other users cannot access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages client profiles associated with a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list): User can read their own client profiles.
     * @allow (create): User can create client profiles under their own user ID.
     * @allow (update, delete): User can update and delete their own client profiles.
     * @deny: Other users cannot access these client profiles.
     * @principle Enforces document ownership for client profiles.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages invoice data associated with a specific user.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list): User can read their own invoice data.
     * @allow (create): User can create invoice data under their own user ID.
     * @allow (update, delete): User can update and delete their own invoice data.
     * @deny: Other users cannot access this invoice data.
     * @principle Enforces document ownership for invoice data.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages stores list.  Allows read-only access to stores information for all users.
     * @path /stores/{storeId}
     * @allow (get, list): Any user can read stores data.
     * @deny (create, update, delete): No one can create, update, or delete stores through the client; these are managed separately.
     * @principle Allows public read access to global stores data.
     */
    match /stores/{storeId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}