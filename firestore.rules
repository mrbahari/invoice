/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership. Users can only manage data explicitly associated with their user ID, with the exception of globally readable data for products and categories.
 *
 * Data Structure:
 * The Firestore database is structured as follows:
 * - /products/{productId}: Publicly accessible product catalog.
 * - /categories/{categoryId}: Publicly accessible categories.
 * - /users/{userId}: User profiles (email only for now).
 * - /users/{userId}/clients/{clientId}: Clients owned by the user.
 * - /users/{userId}/invoices/{invoiceId}: Invoices owned by the user.
 * - /users/{userId}/stores/{storeId}: Stores owned by the user.
 * - /users/{userId}/units/{unitId}: Units owned by the user.
 * - /users/{userId}/settings/{settingId}: Application settings owned by the user.
 *
 * Key Security Decisions:
 * - Public Read Access for Products and Categories: The `products` and `categories` collections are readable by anyone.
 * - User-Specific Data Ownership: Most data is nested under `/users/{userId}` and is strictly controlled by the `isOwner(userId)` function, ensuring only the authenticated user can access their own data.
 * - Deny resource listing on user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the product catalog, but restricts modifications to authenticated owners.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts writes to owners after ownership field is implemented.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read the product categories. Modifications are disallowed.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, disallows writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to user profiles. Allows a user to create their own profile (self-registration) and restricts further modifications and reads to only that user.
     * @path /users/{userId}
     * @allow (create)
     * @allow (get, update, delete)
     * @deny (list)
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, update, delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages user-specific client data. Only the owning user can create, read, update, or delete clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create, get, list, update, delete)
     * @deny (none)
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific invoice data. Only the owning user can create, read, update, or delete invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create, get, list, update, delete)
     * @deny (none)
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific store data. Only the owning user can create, read, update, or delete stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create, get, list, update, delete)
     * @deny (none)
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/stores/{storeId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific unit data. Only the owning user can create, read, update, or delete units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create, get, list, update, delete)
     * @deny (none)
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/units/{unitId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list, update, delete: if isExistingOwner(userId);
    }

       /**
        * @description Manages user-specific settings data. Only the owning user can create, read, update, or delete settings.
        * @path /users/{userId}/settings/{settingId}
        * @allow (create, get, list, update, delete)
        * @deny (none)
        * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
        */
    match /users/{userId}/settings/{settingId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get, list, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, based on the userId in the path.
     * @param {string} userId - The user ID from the path.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID from the path.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}