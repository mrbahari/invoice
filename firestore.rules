/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the Firestore database.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership.  User data is generally restricted to the owning user.
 * Publicly accessible data (e.g., products, categories) is read-only for unauthenticated users.
 *
 * Data Structure:
 * - /products/{productId}: Public product catalog.
 * - /categories/{categoryId}: Public product categories.
 * - /users/{userId}: User profiles.
 * - /users/{userId}/clients/{clientId}: User-specific customer data.
 * - /users/{userId}/invoices/{invoiceId}: User-specific invoice data.
 * - /users/{userId}/stores/{storeId}: User-specific store data.
 * - /users/{userId}/units/{unitId}: User-specific units of measurement.
 * - /users/{userId}/settings/{settingId}: User-specific application settings.
 *
 * Key Security Decisions:
 * - Public read access to the "products" collection.
 * - Strict user-ownership model for all data under /users/{userId}.
 * - Data consistency is enforced for user-specific paths to ensure data integrity.
 *
 * Denormalization for Authorization:
 *  -  N/A - Currently no denormalization is needed. If shared access is needed in the future, member lists should be stored directly on the secured document.
 * Structural Segregation:
 * - Public data (products, categories) and private data (user data) are stored in separate top-level collections and user subcollections, respectively.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the products catalog.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No one can write to the products collection without authentication.
     * @principle Allows public read access to product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the categories catalog.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No one can write to the categories collection without authentication.
     * @principle Allows public read access to category information.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create): A user can create their own profile.
     * @allow (get, list, update, delete): Only the user can read, update, or delete their own profile.
     * @deny: Any other operation.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user-specific customer data.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create): A user can create customer data for themselves.
     * @allow (get, list, update, delete): Only the user can read, update, or delete their own customer data.
     * @deny: Any other operation.
     * @principle Enforces user-ownership for customer data.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user-specific invoice data.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create): A user can create invoice data for themselves.
     * @allow (get, list, update, delete): Only the user can read, update, or delete their own invoice data.
     * @deny: Any other operation.
     * @principle Enforces user-ownership for invoice data.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user-specific store data.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create): A user can create store data for themselves.
     * @allow (get, list, update, delete): Only the user can read, update, or delete their own store data.
     * @deny: Any other operation.
     * @principle Enforces user-ownership for store data.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user-specific units of measurement.
     * @path /users/{userId}/units/{unitId}
     * @allow (create): A user can create unit data for themselves.
     * @allow (get, list, update, delete): Only the user can read, update, or delete their own unit data.
     * @deny: Any other operation.
     * @principle Enforces user-ownership for unit data.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

      /**
       * @description Manages user-specific application settings.
       * @path /users/{userId}/settings/{settingId}
       * @allow (create): A user can create settings data for themselves.
       * @allow (get, list, update, delete): Only the user can read, update, or delete their own settings data.
       * @deny: Any other operation.
       * @principle Enforces user-ownership for settings data.
       */
    match /users/{userId}/settings/{settingId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
  }
}