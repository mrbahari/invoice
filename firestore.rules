/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data,
 *              allowing each user to manage their own stores, products, categories, profiles,
 *              invoices, and units. Public read access is granted to visitor logs, but only
 *              authenticated users can create, update, or delete them.
 * @dataStructure
 *   - /users/{userId}/stores/{storeId}
 *   - /users/{userId}/products/{productId}
 *   - /users/{userId}/categories/{categoryId}
 *   - /users/{userId}/userProfiles/{profileId}
 *   - /users/{userId}/invoices/{invoiceId}
 *   - /users/{userId}/units/{unitId}
 *   - /users/{userId}/settings/toolbarPositions
 *   - /visitorLogs/{logId}
 * @keySecurityDecisions
 *   - User data is private and accessible only to the owning user.
 *   - Listing of user profiles is disallowed.
 *   - Public read access is granted to visitor logs, but writes are restricted to authenticated users.
 *   - Data consistency between the path and the document's internal fields is enforced on creation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user-specific stores. Only the owner can create, read, update, or delete stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) User with ID 'user123' can create a store at /users/user123/stores/store456.
     * @allow (get, list) User with ID 'user123' can read the store at /users/user123/stores/store456.
     * @allow (update) User with ID 'user123' can update the store at /users/user123/stores/store456.
     * @allow (delete) User with ID 'user123' can delete the store at /users/user123/stores/store456.
     * @deny (create) User with ID 'user456' cannot create a store at /users/user123/stores/store456.
     * @deny (get, list) User with ID 'user456' cannot read the store at /users/user123/stores/store456.
     * @deny (update) User with ID 'user456' cannot update the store at /users/user123/stores/store456.
     * @deny (delete) User with ID 'user456' cannot delete the store at /users/user123/stores/store456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == storeId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific products. Only the owner can create, read, update, or delete products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) User with ID 'user123' can create a product at /users/user123/products/product456.
     * @allow (get, list) User with ID 'user123' can read the product at /users/user123/products/product456.
     * @allow (update) User with ID 'user123' can update the product at /users/user123/products/product456.
     * @allow (delete) User with ID 'user123' can delete the product at /users/user123/products/product456.
     * @deny (create) User with ID 'user456' cannot create a product at /users/user123/products/product456.
     * @deny (get, list) User with ID 'user456' cannot read the product at /users/user123/products/product456.
     * @deny (update) User with ID 'user456' cannot update the product at /users/user123/products/product456.
     * @deny (delete) User with ID 'user456' cannot delete the product at /users/user123/products/product456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == productId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific categories. Only the owner can create, read, update, or delete categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with ID 'user123' can create a category at /users/user123/categories/category456.
     * @allow (get, list) User with ID 'user123' can read the category at /users/user123/categories/category456.
     * @allow (update) User with ID 'user123' can update the category at /users/user123/categories/category456.
     * @allow (delete) User with ID 'user123' can delete the category at /users/user123/categories/category456.
     * @deny (create) User with ID 'user456' cannot create a category at /users/user123/categories/category456.
     * @deny (get, list) User with ID 'user456' cannot read the category at /users/user123/categories/category456.
     * @deny (update) User with ID 'user456' cannot update the category at /users/user123/categories/category456.
     * @deny (delete) User with ID 'user456' cannot delete the category at /users/user123/categories/category456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == categoryId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific user profiles. Only the owner can create, read, update, or delete their own profile.
     *              Listing of user profiles is explicitly denied.
     * @path /users/{userId}/userProfiles/{profileId}
     * @allow (create) User with ID 'user123' can create a profile at /users/user123/userProfiles/profile456.
     * @allow (get) User with ID 'user123' can read the profile at /users/user123/userProfiles/profile456.
     * @allow (update) User with ID 'user123' can update the profile at /users/user123/userProfiles/profile456.
     * @allow (delete) User with ID 'user123' can delete the profile at /users/user123/userProfiles/profile456.
     * @deny (create) User with ID 'user456' cannot create a profile at /users/user123/userProfiles/profile456.
     * @deny (get) User with ID 'user456' cannot read the profile at /users/user123/userProfiles/profile456.
     * @deny (update) User with ID 'user456' cannot update the profile at /users/user123/userProfiles/profile456.
     * @deny (delete) User with ID 'user456' cannot delete the profile at /users/user123/userProfiles/profile456.
     * @deny (list) No user can list profiles.
     * @principle Enforces strict document ownership and prevents listing of user profiles.
     */
    match /users/{userId}/userProfiles/{profileId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific invoices. Only the owner can create, read, update, or delete invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) User with ID 'user123' can create an invoice at /users/user123/invoices/invoice456.
     * @allow (get, list) User with ID 'user123' can read the invoice at /users/user123/invoices/invoice456.
     * @allow (update) User with ID 'user123' can update the invoice at /users/user123/invoices/invoice456.
     * @allow (delete) User with ID 'user123' can delete the invoice at /users/user123/invoices/invoice456.
     * @deny (create) User with ID 'user456' cannot create an invoice at /users/user123/invoices/invoice456.
     * @deny (get, list) User with ID 'user456' cannot read the invoice at /users/user123/invoices/invoice456.
     * @deny (update) User with ID 'user456' cannot update the invoice at /users/user123/invoices/invoice456.
     * @deny (delete) User with ID 'user456' cannot delete the invoice at /users/user123/invoices/invoice456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == invoiceId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific measurement units. Only the owner can create, read, update, or delete units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) User with ID 'user123' can create a unit at /users/user123/units/unit456.
     * @allow (get, list) User with ID 'user123' can read the unit at /users/user123/units/unit456.
     * @allow (update) User with ID 'user123' can update the unit at /users/user123/units/unit456.
     * @allow (delete) User with ID 'user123' can delete the unit at /users/user123/units/unit456.
     * @deny (create) User with ID 'user456' cannot create a unit at /users/user123/units/unit456.
     * @deny (get, list) User with ID 'user456' cannot read the unit at /users/user123/units/unit456.
     * @deny (update) User with ID 'user456' cannot update the unit at /users/user123/units/unit456.
     * @deny (delete) User with ID 'user456' cannot delete the unit at /users/user123/units/unit456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == unitId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific toolbar settings. Only the owner can create, read, update, or delete their settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create) User with ID 'user123' can create settings at /users/user123/settings/toolbarPositions.
     * @allow (get, list) User with ID 'user123' can read the settings at /users/user123/settings/toolbarPositions.
     * @allow (update) User with ID 'user123' can update the settings at /users/user123/settings/toolbarPositions.
     * @allow (delete) User with ID 'user123' can delete the settings at /users/user123/settings/toolbarPositions.
     * @deny (create) User with ID 'user456' cannot create settings at /users/user123/settings/toolbarPositions.
     * @deny (get, list) User with ID 'user456' cannot read the settings at /users/user123/settings/toolbarPositions.
     * @deny (update) User with ID 'user456' cannot update the settings at /users/user123/settings/toolbarPositions.
     * @deny (delete) User with ID 'user456' cannot delete the settings at /users/user123/settings/toolbarPositions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to visitor logs.  Logs are publicly readable, but only authenticated users can create, update, or delete them.
     * @path /visitorLogs/{logId}
     * @allow (get, list) Any user can read visitor logs.
     * @allow (create) An authenticated user can create a log at /visitorLogs/log123.
     * @allow (update) An authenticated user can update a log at /visitorLogs/log123.
     * @allow (delete) An authenticated user can delete a log at /visitorLogs/log123.
     * @deny (create) An unauthenticated user cannot create a log.
     * @deny (update) An unauthenticated user cannot update a log.
     * @deny (delete) An unauthenticated user cannot delete a log.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /visitorLogs/{logId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner and the resource exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}