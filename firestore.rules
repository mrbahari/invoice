/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data,
 * ensuring that users can only access their own data. Public read access
 * is granted to the `/visitorLogs` collection.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Public visitor log data is stored in `/visitorLogs/{logId}`.
 *
 * Key Security Decisions:
 * - Users can only manage their own stores, products, categories, profiles, invoices, and units.
 * - Listing other users' data is disallowed.
 * - Public read access is allowed for visitor logs.
 *
 * Denormalization for Authorization:
 *  - The rules rely on path-based authorization.  Documents under `/users/{userId}` are considered owned by that user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can create a store under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/stores/store1 if authenticated.
     * @allow (update) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can update store 'store1' under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/stores/store1 if authenticated.
     * @deny (create) - User ' অন্যকেউ' cannot create a store under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/stores/store1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can create a product under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/products/product1 if authenticated.
     * @allow (update) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can update product 'product1' under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/products/product1 if authenticated.
     * @deny (create) - User ' অন্যকেউ' cannot create a product under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/products/product1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can create a category under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/categories/category1 if authenticated.
     * @allow (update) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can update category 'category1' under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/categories/category1 if authenticated.
     * @deny (create) - User ' অন্যকেউ' cannot create a category under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/categories/category1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific user profiles.
     * @path /users/{userId}/userProfiles/{profileId}
     * @allow (create) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can create a profile under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/userProfiles/profile1 if authenticated.
     * @allow (update) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can update profile 'profile1' under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/userProfiles/profile1 if authenticated.
     * @deny (create) - User ' অন্যকেউ' cannot create a profile under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/userProfiles/profile1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userProfiles/{profileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can create a invoice under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/invoices/invoice1 if authenticated.
     * @allow (update) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can update invoice 'invoice1' under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/invoices/invoice1 if authenticated.
     * @deny (create) - User ' অন্যকেউ' cannot create a invoice under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/invoices/invoice1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can create a unit under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/units/unit1 if authenticated.
     * @allow (update) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can update unit 'unit1' under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/units/unit1 if authenticated.
     * @deny (create) - User ' অন্যকেউ' cannot create a unit under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/units/unit1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can create settings under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/settings/toolbarPositions if authenticated.
     * @allow (update) - User 'xHYjOZByDvVoCdllW9YbyGU9ZKb2' can update settings under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/settings/toolbarPositions if authenticated.
     * @deny (create) - User ' অন্যকেউ' cannot create settings under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/settings/toolbarPositions.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for visitor logs. Public read, owner-only write.
     * @path /visitorLogs/{logId}
     * @allow (get, list) - Any user can read visitor logs.
     * @allow (create) - Any authenticated user can create a visitor log.
     * @allow (update, delete) - Only the owner can update or delete a visitor log.
     * @principle Allows public reads for analytics, restricts writes to owners.
     */
    match /visitorLogs/{logId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}