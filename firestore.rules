/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric model for user-specific data while allowing public read access to product and category information.
 *
 * Data Structure:
 * - Products and Categories are stored in publicly accessible top-level collections.
 * - User-specific data (clients, invoices, stores, units, settings) are nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only manage their own data (clients, invoices, stores, units).
 * - Public read access is granted for products and categories.
 * - The rules validate that the `storeId` on categories always matches the store to which it belongs, preventing cross-store data manipulation.
 * - Listing of user subcollections is allowed for the owner.
 *
 * Denormalization for Authorization:
 * - The `storeId` is included in the Category documents to allow authorization checks on the category level.
 *
 * Structural Segregation:
 * - Public data (products, categories) is stored in top-level collections.
 * - Private data (clients, invoices, stores, units, settings) is stored under user-specific subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership for user-specific data.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and it exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that updates and deletes only happen on existing resources owned by the user.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Publicly accessible collection of products.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create): Only the product owner can create a product with a matching authorId.
     * @allow (update, delete): Only the product owner can modify or delete a product.
     * @deny (create): A user attempts to create a product without being authenticated.
     * @deny (update, delete): A non-owner attempts to modify or delete a product.
     * @principle Public read access with owner-only writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Publicly accessible collection of categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @allow (create): A user with valid authentication creates a category for a store they own.
     * @allow (update, delete): Only the category owner can modify or delete a category.
     * @deny (create): A user attempts to create a category for a store they don't own.
     * @deny (update, delete): A non-owner attempts to modify or delete a category.
     * @principle Public read access with store-owner-only writes and validation of the storeId.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId is string;
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description User-specific collection of clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list): Only the owner can read their own client information.
     * @allow (create, update, delete): Only the owner can manage their own clients.
     * @deny (get, list): A non-owner attempts to read client information.
     * @deny (create, update, delete): A non-owner attempts to manage clients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list): Only the owner can read their own invoice information.
     * @allow (create, update, delete): Only the owner can manage their own invoices.
     * @deny (get, list): A non-owner attempts to read invoice information.
     * @deny (create, update, delete): A non-owner attempts to manage invoices.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (get, list): Only the owner can read their own store information.
     * @allow (create): Only the owner can create their store. Validates ownership on create.
     * @allow (update, delete): Only the owner can manage their own stores.
     * @deny (get, list): A non-owner attempts to read store information.
     * @deny (create): A non-owner attempts to create a store.
     * @deny (update, delete): A non-owner attempts to manage stores.
     * @principle Enforces document ownership for writes and validates ownership on create.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of measurement units.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list): Only the owner can read their own unit information.
     * @allow (create, update, delete): Only the owner can manage their own units.
     * @deny (get, list): A non-owner attempts to read unit information.
     * @deny (create, update, delete): A non-owner attempts to manage units.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores settings for a user, like toolbar positions.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get): Only the owner can read their own settings.
     * @allow (create, update, delete): Only the owner can manage their own settings.
     * @deny (get): A non-owner attempts to read settings.
     * @deny (create, update, delete): A non-owner attempts to manage settings.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}