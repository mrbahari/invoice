/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * All data is secured based on the authenticated user's identity and, where applicable,
 * their role or ownership of specific resources.
 *
 * Data Structure:
 * The Firestore data model segregates data into public collections (e.g., /products, /categories)
 * and user-specific subcollections under /users/{userId} (e.g., /users/{userId}/clients, /users/{userId}/invoices).
 *
 * Key Security Decisions:
 * - Public Read with Owner-Only Writes for `/products` and `/categories`. Any user can read the products and categories,
 *   but only the owner can create, update, or delete.
 * - Strict user ownership is enforced for all data under `/users/{userId}`. Only the authenticated user
 *   matching the `userId` path segment can access or modify their own data.
 * - Listing of user-specific subcollections (e.g., invoices, clients) is allowed only for the owner.
 *
 * Denormalization for Authorization:
 * The `Store` entity includes an `ownerId` field. This denormalization is used to enforce store ownership,
 * allowing rules to verify if the authenticated user is the owner of a specific store.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read products, but only the owner can create, update, or delete.
     * @path /products/{productId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid != null && request.resource.data.storeId == getStoreOwnerId(request.resource.data.storeId)
     * @allow (update, delete): if request.auth.uid != null && resource.data.storeId == getStoreOwnerId(resource.data.storeId)
     * @deny (create): if request.auth == null
     * @deny (update, delete): if request.auth == null
     * @deny (create): if request.resource.data.storeId != getStoreOwnerId(request.resource.data.storeId)
     * @deny (update, delete): if resource == null || resource.data.storeId != getStoreOwnerId(resource.data.storeId)
     * @principle Public read, owner-only writes with storeId validation.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId == getStoreOwnerId(request.resource.data.storeId);
      allow update: if isSignedIn() && resource.data.storeId == getStoreOwnerId(resource.data.storeId) && resource != null;
      allow delete: if isSignedIn() && resource.data.storeId == getStoreOwnerId(resource.data.storeId) && resource != null;
    }

    /**
     * @description Allows anyone to read categories, but only the owner can create, update, or delete.
     * @path /categories/{categoryId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid != null && request.resource.data.storeId == getStoreOwnerId(request.resource.data.storeId)
     * @allow (update, delete): if request.auth.uid != null && resource.data.storeId == getStoreOwnerId(resource.data.storeId)
     * @deny (create): if request.auth == null
     * @deny (update, delete): if request.auth == null
     * @deny (create): if request.resource.data.storeId != getStoreOwnerId(request.resource.data.storeId)
     * @deny (update, delete): if resource == null || resource.data.storeId != getStoreOwnerId(resource.data.storeId)
     * @principle Public read, owner-only writes with storeId validation.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.storeId == getStoreOwnerId(request.resource.data.storeId);
      allow update: if isSignedIn() && resource.data.storeId == getStoreOwnerId(resource.data.storeId) && resource != null;
      allow delete: if isSignedIn() && resource.data.storeId == getStoreOwnerId(resource.data.storeId) && resource != null;
    }

    /**
     * @description Enforces user-specific ownership for clients. Only the user can create, read, update, or delete their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, list): if request.auth.uid == userId
     * @allow (update): if request.auth.uid == userId && resource != null
     * @allow (delete): if request.auth.uid == userId && resource != null
     * @deny (create): if request.auth.uid != userId
     * @deny (get, list): if request.auth.uid != userId
     * @deny (update): if request.auth.uid != userId || resource == null
     * @deny (delete): if request.auth.uid != userId || resource == null
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific ownership for invoices. Only the user can create, read, update, or delete their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, list): if request.auth.uid == userId
     * @allow (update): if request.auth.uid == userId && resource != null
     * @allow (delete): if request.auth.uid == userId && resource != null
     * @deny (create): if request.auth.uid != userId
     * @deny (get, list): if request.auth.uid != userId
     * @deny (update): if request.auth.uid != userId || resource == null
     * @deny (delete): if request.auth.uid != userId || resource == null
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific ownership for stores. Only the user can create, read, update, or delete their own stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, list): if request.auth.uid == userId
     * @allow (update): if request.auth.uid == userId && resource != null
     * @allow (delete): if request.auth.uid == userId && resource != null
     * @deny (create): if request.auth.uid != userId
     * @deny (get, list): if request.auth.uid != userId
     * @deny (update): if request.auth.uid != userId || resource == null
     * @deny (delete): if request.auth.uid != userId || resource == null
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow create: if isOwner(userId) && request.resource.data.ownerId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific ownership for units. Only the user can create, read, update, or delete their own units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, list): if request.auth.uid == userId
     * @allow (update): if request.auth.uid == userId && resource != null
     * @allow (delete): if request.auth.uid == userId && resource != null
     * @deny (create): if request.auth.uid != userId
     * @deny (get, list): if request.auth.uid != userId
     * @deny (update): if request.auth.uid != userId || resource == null
     * @deny (delete): if request.auth.uid != userId || resource == null
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific ownership for toolbar settings. Only the user can create, read, update, or delete their own settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create): if request.auth.uid == userId
     * @allow (get, list): if request.auth.uid == userId
     * @allow (update): if request.auth.uid == userId && resource != null
     * @allow (delete): if request.auth.uid == userId && resource != null
     * @deny (create): if request.auth.uid != userId
     * @deny (get, list): if request.auth.uid != userId
     * @deny (update): if request.auth.uid != userId || resource == null
     * @deny (delete): if request.auth.uid != userId || resource == null
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function getStoreOwnerId(storeId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(storeId)).data.ownerId;
    }
  }
}