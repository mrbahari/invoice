rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }
    
    /**
     * @description Rules for the /categories collection. Allows public read access.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No user can modify category data without authentication or ownership.
     * @principle Allows public read access while restricting write access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /products collection. Allows public read access.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No user can modify product data without authentication or ownership.
     * @principle Allows public read access while restricting write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /users collection. Allows a user to create their own document, and only they can read or modify it.
     * @path /users/{userId}
     * @allow (create) A user can create their own document if the userId matches their auth.uid.
     * @allow (get, list, update, delete) Only the user with matching userId can access their document.
     * @deny (create) A user cannot create a document with a userId that doesn't match their auth.uid.
     * @deny (get, list, update, delete) Other users cannot access this document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/clients collection. Only the user can manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) A user can create a client under their user ID.
     * @allow (get, list, update, delete) Only the user with matching userId can access their clients.
     * @deny (create) A user cannot create a client under another user's ID.
     * @deny (get, list, update, delete) Other users cannot access this client.
     * @principle Enforces document ownership for client profiles.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/invoices collection. Only the user can manage their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) A user can create an invoice under their user ID.
     * @allow (get, list, update, delete) Only the user with matching userId can access their invoices.
     * @deny (create) A user cannot create an invoice under another user's ID.
     * @deny (get, list, update, delete) Other users cannot access this invoice.
     * @principle Enforces document ownership for invoices.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/stores collection. Only the user can manage their own stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) A user can create a store under their user ID.
     * @allow (get, list, update, delete) Only the user with matching userId can access their stores.
     * @deny (create) A user cannot create a store under another user's ID.
     * @deny (get, list, update, delete) Other users cannot access this store.
     * @principle Enforces document ownership for stores.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
     * @description Rules for the /users/{userId}/settings/{settingsId} collection. Only the user can manage their own settings.
     * @path /users/{userId}/settings/{settingsId}
     */
    match /users/{userId}/settings/{settingsId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}