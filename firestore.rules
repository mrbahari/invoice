/**
 * @fileoverview Firestore Security Rules for Hisaabgar application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, combining public read access for product catalogs with strict user-ownership for personal data.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product information.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/clients/{clientId}: Client profiles, accessible only to the owning user.
 * - /users/{userId}/invoices/{invoiceId}: Invoices, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Products and categories are publicly readable to allow for open catalog browsing without authentication.
 * - User listing is implicitly denied by the data structure, as there is no top-level collection of users.
 * - Missing ownership fields will halt rule generation with a clear error to prevent accidental data leaks.
 *
 * Denormalization for Authorization:
 *  N/A - The current data model does not require denormalization as user-specific data is namespaced under the user's ID, and public data is open for read.
 *
 * Structural Segregation:
 * Public product catalogs are segregated from private user data using separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user ID matches the auth UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user ID matches the auth UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete category data.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can create, update, or delete product data.
     * @principle Allows public read access to products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /stores collection.
     * @path /stores
     * @allow (list): Any user can read stores data.
     * @deny (create, update, delete,get): No user can create, update, or delete or get stores data.
     * @principle Allows public read access to stores.
     */
    match /stores {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create): Only the user with matching ID can create their own document.
     * @allow (get, update, delete): Only the owner of the user document can read, update, or delete it.
     * @deny (list): Listing users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce ownership and immutability of id field.
      allow list: if false;
    }

    /**
     * @description Rules for the /users/{userId}/clients/{clientId} collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create): Only the owner can create client documents under their user ID. The clientId is not validated.
     * @allow (get, list, update, delete): Only the owner can read, list, update, or delete their client documents.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for clients.
     */
    match /users/{userId}/clients/{clientId} {
      allow create: if isOwner(userId);
      allow get, list, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/invoices/{invoiceId} collection.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create): Only the owner can create invoice documents under their user ID. The invoiceId is not validated.
     * @allow (get, list, update, delete): Only the owner can read, list, update, or delete their invoice documents.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for invoices.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow create: if isOwner(userId);
      allow get, list, update, delete: if isExistingOwner(userId);
    }
  }
}