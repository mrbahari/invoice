/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data and allows public read access to product catalog data.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profile data, private to the user.
 * - /users/{userId}/clients/{clientId}: Client profiles, private to the user.
 * - /users/{userId}/invoices/{invoiceId}: Invoice data, private to the user.
 * - /users/{userId}/stores/{storeId}: Store data, private to the user.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's authentication ID (UID).
 * - Public read access is granted to categories and products.
 * - List operations on user-scoped subcollections are restricted to the owner.
 *
 * Denormalization for Authorization:
 * - None implemented in this version. Consider denormalizing an `ownerId` field onto Products and Categories if ownership-based writes are required.
 *
 * Structural Segregation:
 * - Public product data (categories, products) is stored in top-level collections, separate from private user data, for simpler and more performant list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to categories
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to products
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data, private to the user.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile.
     * @allow (get, list, update, delete) The user can only access their own profile.
     * @deny Any other user from accessing this data.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages client profiles associated with a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list, create, update, delete) The user can manage their own clients.
     * @deny Any other user from accessing this data.
     * @principle Enforces document ownership for client profiles.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages invoice data associated with a specific user.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list, create, update, delete) The user can manage their own invoices.
     * @deny Any other user from accessing this data.
     * @principle Enforces document ownership for invoice data.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages store data associated with a specific user.
      * @path /users/{userId}/stores/{storeId}
      * @allow (get, list, create, update, delete) The user can manage their own stores.
      * @deny Any other user from accessing this data.
      * @principle Enforces document ownership for store data.
      */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages settings data associated with a specific user.
     * @path /users/{userId}/settings/{settingId}
     * @allow (get, list, create, update, delete) The user can manage their own settings.
     * @deny Any other user from accessing this data.
     * @principle Enforces document ownership for store data.
     */
    match /users/{userId}/settings/{settingId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages toolbarPositions data associated with a specific user's settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get, list, create, update, delete) The user can manage their own settings.
     * @deny Any other user from accessing this data.
     * @principle Enforces document ownership for store data.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}