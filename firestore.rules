rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, update) Authenticated user accessing their own profile.
     * @deny (read, update) Authenticated user trying to access another user's profile.
     * @allow (create) Authenticated user creating their own profile during signup.
     * @deny (delete) Any user attempting to delete a profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow read, update: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;
    }

    /**
     * @description Controls access to product information. Products are publicly readable, but write access is restricted to vendors and admins.
     * @path /products/{productId}
     * @allow (read) Any user can read product information.
     * @allow (create) Authenticated user with 'admin' role or matching vendor ID creating a product.
     * @allow (update) Authenticated user with 'admin' role or matching vendor ID updating a product.
     * @allow (delete) Authenticated user with 'admin' role or matching vendor ID deleting a product.
     * @deny (create) Unauthenticated user attempting to create a product.
     * @deny (update) Unauthenticated user attempting to update a product.
     * @deny (delete) Unauthenticated user attempting to delete a product.
     * @principle Public read access with owner-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (isAdmin() || request.auth.uid == request.resource.data.vendorId);
      allow update: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.vendorId);
      allow delete: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.vendorId);
    }

    /**
     * @description Controls access to shopping cart information. Only the cart owner can read and write cart data.
     * @path /carts/{cartId}
     * @allow (read, write) Authenticated user accessing their own cart.
     * @deny (read, write) Authenticated user trying to access another user's cart.
     * @principle Enforces document ownership for shopping carts.
     */
    match /carts/{cartId} {
      allow read, write: if isSignedIn() && request.auth.uid == cartId;
    }

    /**
     * @description Controls access to order information. Order owners can create and read orders. Vendors and admins can read and update orders related to their products.
     * @path /orders/{orderId}
     * @allow (create) Authenticated user creating an order with their own user ID as the owner.
     * @allow (read) Authenticated user reading their own order, or an admin, or a vendor reading an order containing their products.
     * @allow (update) Authenticated user updating their own order, or an admin, or a vendor updating an order containing their products.
     * @deny (delete) Any user attempting to delete an order.
     * @principle Enforces document ownership and vendor access for orders.
     */
    match /orders/{orderId} {
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow read: if isSignedIn() && (request.resource.data.owner == request.auth.uid || isAdmin() || isVendorForOrder(request.resource.data.items));
      allow update: if isSignedIn() && (request.resource.data.owner == request.auth.uid || isAdmin() || isVendorForOrder(request.resource.data.items));
      allow delete: if false;
    }

    /**
     * @description Controls access to vendor information. Read access is public, but create/update access is restricted to admins or the vendor owner.
     * @path /vendors/{vendorId}
     * @allow (read) Any user can read vendor information.
     * @allow (create) Authenticated user can create vendor.
     * @allow (update) Authenticated user with 'admin' role or the vendor owner updating the vendor.
     * @deny (create) Unauthenticated user attempting to create a vendor.
     * @deny (update) Unauthenticated user attempting to update a vendor who is not the owner or an admin.
     * @principle Public read access with owner-only writes.
     */
    match /vendors/{vendorId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.ownerUid);
      allow delete: if false;
    }

    /**
     * @description Controls access to product reviews. Any user can create a review for a product they bought. Only the review author can update/delete their review.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow (create) Authenticated user creating a review with their own user ID as the author.
     * @allow (read) Any user can read reviews.
     * @allow (update, delete) Authenticated user updating or deleting their own review.
     * @deny (create) Unauthenticated user attempting to create a review.
     * @deny (update, delete) Authenticated user trying to update or delete another user's review.
     * @principle Enforces document ownership for reviews.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow create: if isSignedIn() && request.resource.data.authorUid == request.auth.uid;
      allow get, list: if true;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.authorUid;
    }

        /**
     * @description Controls access to client information under a user. Only the user can read, create, update, and delete client data.
     * @path /users/{userId}/clients/{clientId}
     * @allow (read, write) Authenticated user accessing their own client data.
     * @deny (read, write) Authenticated user trying to access another user's client data.
     * @principle Enforces document ownership for clients.
     */
    match /users/{userId}/clients/{clientId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

            /**
     * @description Controls access to invoice information under a user. Only the user can read, create, update, and delete invoice data.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (read, write) Authenticated user accessing their own invoice data.
     * @deny (read, write) Authenticated user trying to access another user's invoice data.
     * @principle Enforces document ownership for invoices.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

                /**
     * @description Controls access to store information under a user. Only the user can read, create, update, and delete store data.
     * @path /users/{userId}/stores/{storeId}
     * @allow (read, write) Authenticated user accessing their own store data.
     * @deny (read, write) Authenticated user trying to access another user's store data.
     * @principle Enforces document ownership for stores.
     */
    match /users/{userId}/stores/{storeId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

                    /**
     * @description Controls access to unit information under a user. Only the user can read, create, update, and delete unit data.
     * @path /users/{userId}/units/{unitId}
     * @allow (read, write) Authenticated user accessing their own unit data.
     * @deny (read, write) Authenticated user trying to access another user's unit data.
     * @principle Enforces document ownership for units.
     */
    match /users/{userId}/units/{unitId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

                        /**
     * @description Controls access to toolbar settings information under a user. Only the user can read, create, update, and delete toolbar settings data.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (read, write) Authenticated user accessing their own toolbar settings data.
     * @deny (read, write) Authenticated user trying to access another user's toolbar settings data.
     * @principle Enforces document ownership for toolbar settings.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Fallback rule to deny all read and write access to any other documents not explicitly matched.
     * @path /{document=**}
     * @deny (read, write) Any user attempting to access any unmatched document.
     * @principle Denies access to any path not explicitly allowed.
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }

  function isVendorForOrder(items) {
    return isSignedIn() && request.auth.uid in items[].vendorId;
  }
}