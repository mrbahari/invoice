/**
 * @fileoverview Firestore Security Rules for the Hisaabgar application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client data and
 * category data and their associated subcollections. Only the authenticated user
 * matching the document ID has full access.
 *
 * Data Structure:
 * - Clients are stored under /clients/{clientId}, where clientId is the user's UID.
 * - Invoices are stored under /clients/{clientId}/invoices/{invoiceId}.
 * - Categories are stored under /categories/{categoryId}.
 * - Products are stored under /categories/{categoryId}/products/{productId}.
 *
 * Key Security Decisions:
 * - Listing of all clients or categories is disallowed.
 * - Data validation is minimal in this prototyping phase, focusing on
 *   authorization and relational integrity only.
 * - Public read access is NOT granted to any collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures client profiles. Only the authenticated user matching the client ID can access.
     * @path /clients/{clientId}
     * @allow (create) User with UID 'user_abc' can create a client profile at /clients/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, and delete their own profile at /clients/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a client profile at /clients/user_abc.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot access the profile at /clients/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      // Helper function to check if the user is signed in and owns the document.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Secures invoices associated with a client. Only the authenticated user matching the client ID can access.
     * @path /clients/{clientId}/invoices/{invoiceId}
     * @allow (create) User with UID 'user_abc' can create an invoice at /clients/user_abc/invoices/invoice_123.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, and delete their own invoice at /clients/user_abc/invoices/invoice_123.
     * @deny (create) User with UID 'user_xyz' cannot create an invoice at /clients/user_abc/invoices/invoice_123.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot access the invoice at /clients/user_abc/invoices/invoice_123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /clients/{clientId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

     /**
      * @description Secures category profiles. Only the authenticated user matching the category ID can access.
      * @path /categories/{categoryId}
      * @allow (create) User with UID 'user_abc' can create a category profile at /categories/category_abc.
      * @allow (get, update, delete) User with UID 'user_abc' can get, update, and delete their own profile at /categories/category_abc.
      * @deny (create) User with UID 'user_xyz' cannot create a category profile at /categories/category_abc.
      * @deny (get, update, delete) User with UID 'user_xyz' cannot access the profile at /categories/category_abc.
      * @principle Enforces document ownership for writes.
      */
    match /categories/{categoryId} {
      // Helper function to check if the user is signed in and owns the document.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(categoryId) {
        return request.auth.uid == categoryId;
      }
      function isExistingOwner(categoryId) {
        return isOwner(categoryId) && resource != null;
      }

      allow get: if isOwner(categoryId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(categoryId);
      allow update: if isExistingOwner(categoryId);
      allow delete: if isExistingOwner(categoryId);
    }

    /**
     * @description Secures products associated with a category. Only the authenticated user matching the category ID can access.
     * @path /categories/{categoryId}/products/{productId}
     * @allow (create) User with UID 'user_abc' can create a product at /categories/category_abc/products/product_123.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, and delete their own product at /categories/category_abc/products/product_123.
     * @deny (create) User with UID 'user_xyz' cannot create a product at /categories/category_abc/products/product_123.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot access the product at /categories/category_abc/products/product_123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /categories/{categoryId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(categoryId) {
        return request.auth.uid == categoryId;
      }
      function isExistingOwner(categoryId) {
        return isOwner(categoryId) && resource != null;
      }

      allow get: if isOwner(categoryId);
      allow list: if isOwner(categoryId);

      allow create: if isSignedIn() && isOwner(categoryId);
      allow update: if isExistingOwner(categoryId);
      allow delete: if isExistingOwner(categoryId);
    }
  }
}