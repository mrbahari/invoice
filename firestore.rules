/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and relationship enforcement,
 * while minimizing data shape validation. It enforces strict user-ownership for private data
 * and allows public read access to shared data where applicable, with owner-only writes.
 *
 * Data Structure:
 * - Public collections: `/products/{productId}`, `/categories/{categoryId}`, `/stores/{storeId}`
 * - User-specific collections: `/users/{userId}/clients/{clientId}`, `/users/{userId}/invoices/{invoiceId}`,
 *   `/users/{userId}/units/{unitId}`, `/users/{userId}/settings/toolbarPositions`
 *
 * Key Security Decisions:
 * - Users can only manage data under their own user ID.
 * - Public collections are readable by everyone, but only writable by the owner (based on denormalized `ownerId` or similar).
 * - Schema validation is relaxed to allow for rapid data model iteration. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * The `/stores/{storeId}` document must contain the `ownerId` of the store owner to allow for secure writes.
 * The `/products/{productId}` and `/categories/{categoryId}` documents do not specify an `ownerId`. We must add this.
 *
 * Structural Segregation:
 * User-specific data (clients, invoices, units, settings) is stored under the `/users/{userId}` collection, ensuring privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is the owner of an existing resource.
      * @param {string} userId - The user ID to compare against the resource's owner ID.
      * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(ownerId) {
      return isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for the public collection of products.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create): Only the product creator can create.
     * @allow (update, delete): Only the product owner can update or delete.
     * @deny (create): Non-owners cannot create products.
     * @deny (update, delete): Non-owners cannot update or delete products.
     * @principle Public read, owner-only writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for the public collection of categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @allow (create): Only the category creator can create.
     * @allow (update, delete): Only the category owner can update or delete.
     * @deny (create): Non-owners cannot create categories.
     * @deny (update, delete): Non-owners cannot update or delete categories.
     * @principle Public read, owner-only writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for the public collection of stores.
     * @path /stores/{storeId}
     * @allow (get, list): Any user can read store information.
     * @allow (create): Only the store owner can create.
     * @allow (update, delete): Only the store owner can update or delete.
     * @deny (create): Non-owners cannot create stores.
     * @deny (update, delete): Non-owners cannot update or delete stores.
     * @principle Public read, owner-only writes.
     */
    match /stores/{storeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for the user-specific collection of clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list): Only the owner can read their clients.
     * @allow (create, update, delete): Only the owner can manage their clients.
     * @deny (get, list, create, update, delete): Non-owners cannot access or modify client data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the user-specific collection of invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list): Only the owner can read their invoices.
     * @allow (create, update, delete): Only the owner can manage their invoices.
     * @deny (get, list, create, update, delete): Non-owners cannot access or modify invoice data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the user-specific collection of units.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list): Only the owner can read their units.
     * @allow (create, update, delete): Only the owner can manage their units.
     * @deny (get, list, create, update, delete): Non-owners cannot access or modify unit data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the user-specific document storing toolbar positions.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get): Only the owner can read their settings.
     * @allow (create, update): Only the owner can manage their settings.
     * @deny (get, create, update): Non-owners cannot access or modify settings.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow create, update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}