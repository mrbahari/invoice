rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information, but restricts write access to owners.
     * @path /products/{productId}
     * @allow get, list: Anyone can read product information.
     * @allow create: Only the owner can create a product, and the `ownerId` must match their UID.
     * @allow update, delete: Only the owner can update or delete a product.
     * @deny create: A non-authenticated user cannot create a product.
     * @deny update, delete: A non-owner cannot update or delete a product.
     * @principle Allows public reads, but enforces document ownership for writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId));
      allow update, delete: if isSignedIn() && exists(/databases/$(database)/documents/stores/$(resource.data.storeId));
    }

    /**
     * @description Allows public read access to category information, but restricts write access to owners.
     * @path /categories/{categoryId}
     * @allow get, list: Anyone can read category information.
     * @allow create: Only the owner can create a category, and the `ownerId` must match their UID.
     * @allow update, delete: Only the owner can update or delete a category.
     * @deny create: A non-authenticated user cannot create a category.
     * @deny update, delete: A non-owner cannot update or delete a category.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
    
    /**
     * @description Allows public read access to stores, but restricts write access to the store owner.
     * @path /stores/{storeId}
     * @allow get, list: Anyone can read store information.
     * @allow create: Only the owner can create a store, and the `ownerId` must match their UID.
     * @allow update, delete: Only the owner can update or delete a store.
     * @deny create: A non-authenticated user cannot create a store.
     * @deny update, delete: A non-owner cannot update or delete a store.
     * @principle Allows public reads, but enforces document ownership for writes.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Enforces owner-only access to client data.
     * @path /users/{userId}/clients/{clientId}
     * @allow get, list: Only the owner can read their clients.
     * @allow create: Only the owner can create a client. The `userId` in the path must match the authenticated user's UID.
     * @allow update, delete: Only the owner can update or delete a client.
     * @deny create: A non-authenticated user cannot create a client. A user cannot create a client under another user's ID.
     * @deny update, delete: A non-owner cannot update or delete a client.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }

    /**
     * @description Enforces owner-only access to invoice data.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow get, list: Only the owner can read their invoices.
     * @allow create: Only the owner can create an invoice. The `userId` in the path must match the authenticated user's UID.
     * @allow update, delete: Only the owner can update or delete an invoice.
     * @deny create: A non-authenticated user cannot create an invoice. A user cannot create an invoice under another user's ID.
     * @deny update, delete: A non-owner cannot update or delete an invoice.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }

    /**
     * @description Enforces owner-only access to unit data.
     * @path /users/{userId}/units/{unitId}
     * @allow get, list: Only the owner can read their measurement units.
     * @allow create: Only the owner can create a measurement unit. The `userId` in the path must match the authenticated user's UID.
     * @allow update, delete: Only the owner can update or delete a measurement unit.
     * @deny create: A non-authenticated user cannot create a measurement unit. A user cannot create a unit under another user's ID.
     * @deny update, delete: A non-owner cannot update or delete a measurement unit.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/units/{unitId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }

    /**
     * @description Enforces owner-only access to toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow get, list: Only the owner can read their toolbar settings.
     * @allow create: Only the owner can create toolbar settings. The `userId` in the path must match the authenticated user's UID.
     * @allow update, delete: Only the owner can update or delete toolbar settings.
     * @deny create: A non-authenticated user cannot create toolbar settings. A user cannot create settings under another user's ID.
     * @deny update, delete: A non-owner cannot update or delete toolbar settings.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }
}