/**
 * @file Firestore Security Rules for Hisaabgar Application
 *
 * @core_philosophy This ruleset enforces a strict ownership model based on Firestore paths.
 *  Clients can only access their own profiles and invoices. Categories and Products are accessible
 *  to anyone.
 *
 * @data_structure
 *  - /clients/{clientId}: Stores client profiles, with each document ID matching the client's UID.
 *  - /clients/{clientId}/invoices/{invoiceId}: Stores invoices belonging to a specific client.
 *  - /categories/{categoryId}: Stores product categories. Publicly readable.
 *  - /categories/{categoryId}/products/{productId}: Stores products within a specific category. Publicly readable.
 *
 * @key_security_decisions
 *  - Clients can only create, read, update, and delete their own profiles and invoices.
 *  - Categories and Products are publicly readable, but creation, updates, and deletion are denied.
 *  - List operations are enabled for clients to view their invoices, and enabled for all to view categories and products.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows clients to manage their own profile.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create a client profile with ID 'user_abc'.
     * @deny (create) - Authenticated user with UID 'user_abc' cannot create a client profile with ID 'user_xyz'.
     * @allow (get) - Authenticated user with UID 'user_abc' can read the client profile with ID 'user_abc'.
     * @deny (get) - Authenticated user with UID 'user_xyz' cannot read the client profile with ID 'user_abc'.
     * @allow (list) - Authenticated user with UID 'user_abc' can list client profiles.
     * @deny (list) - Listing is allowed and cannot be denied.
     * @allow (update) - Authenticated user with UID 'user_abc' can update the client profile with ID 'user_abc'.
     * @deny (update) - Authenticated user with UID 'user_xyz' cannot update the client profile with ID 'user_abc'.
     * @allow (delete) - Authenticated user with UID 'user_abc' can delete the client profile with ID 'user_abc'.
     * @deny (delete) - Authenticated user with UID 'user_xyz' cannot delete the client profile with ID 'user_abc'.
     * @principle Enforces document ownership for client profiles.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(clientId);
      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Allows clients to manage their own invoices.
     * @path /clients/{clientId}/invoices/{invoiceId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create an invoice under /clients/user_abc/invoices/invoice_123.
     * @deny (create) - Authenticated user with UID 'user_xyz' cannot create an invoice under /clients/user_abc/invoices/invoice_123.
     * @allow (get) - Authenticated user with UID 'user_abc' can read the invoice under /clients/user_abc/invoices/invoice_123.
     * @deny (get) - Authenticated user with UID 'user_xyz' cannot read the invoice under /clients/user_abc/invoices/invoice_123.
     * @allow (list) - Authenticated user with UID 'user_abc' can list invoices under /clients/user_abc.
     * @deny (list) - Authenticated user with UID 'user_xyz' cannot list invoices under /clients/user_abc.
     * @allow (update) - Authenticated user with UID 'user_abc' can update the invoice under /clients/user_abc/invoices/invoice_123.
     * @deny (update) - Authenticated user with UID 'user_xyz' cannot update the invoice under /clients/user_abc/invoices/invoice_123.
     * @allow (delete) - Authenticated user with UID 'user_abc' can delete the invoice under /clients/user_abc/invoices/invoice_123.
     * @deny (delete) - Authenticated user with UID 'user_xyz' cannot delete the invoice under /clients/user_abc/invoices/invoice_123.
     * @principle Enforces document ownership for invoices within a client's profile.
     */
    match /clients/{clientId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isSignedIn() && isOwner(clientId);
      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Allows public read access to categories, but denies all write operations.
     * @path /categories/{categoryId}
     * @allow (get) - Any user can read a category.
     * @deny (get) - N/A
     * @allow (list) - Any user can list categories.
     * @deny (list) - N/A
     * @deny (create) - No one can create categories.
     * @deny (update) - No one can update categories.
     * @deny (delete) - No one can delete categories.
     * @principle Provides public read access while restricting write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to products, but denies all write operations.
     * @path /categories/{categoryId}/products/{productId}
     * @allow (get) - Any user can read a product.
     * @deny (get) - N/A
     * @allow (list) - Any user can list products within a category.
     * @deny (list) - N/A
     * @deny (create) - No one can create products.
     * @deny (update) - No one can update products.
     * @deny (delete) - No one can delete products.
     * @principle Provides public read access while restricting write access.
     */
    match /categories/{categoryId}/products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}