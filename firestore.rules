/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model. Only the authenticated user
 * can create, read, update, or delete data within their own user path.
 * @data-structure All data is nested under /users/{userId}, creating a clear separation of user data.
 * @key-security-decisions
 *   - User listing is explicitly disallowed.
 *   - Data validation is relaxed in prototyping mode, focusing on authorization.
 *   - Read-only collections are not used in this data model.
 *   - All write operations require authentication.
 * @denormalization-for-authorization
 *   - User ownership is enforced by matching the `userId` in the path to the authenticated user's `uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) User "xHYjOZByDvVoCdllW9YbyGU9ZKb2" can create a store under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/stores/someStoreId.
     * @deny (create) User "DIFFERENT_UID" cannot create a store under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/stores/someStoreId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) User "xHYjOZByDvVoCdllW9YbyGU9ZKb2" can create a product under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/products/someProductId.
     * @deny (create) User "DIFFERENT_UID" cannot create a product under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/products/someProductId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User "xHYjOZByDvVoCdllW9YbyGU9ZKb2" can create a category under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/categories/someCategoryId.
     * @deny (create) User "DIFFERENT_UID" cannot create a category under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/categories/someCategoryId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User "xHYjOZByDvVoCdllW9YbyGU9ZKb2" can create a client under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/clients/someClientId.
     * @deny (create) User "DIFFERENT_UID" cannot create a client under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/clients/someClientId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) User "xHYjOZByDvVoCdllW9YbyGU9ZKb2" can create an invoice under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/invoices/someInvoiceId.
     * @deny (create) User "DIFFERENT_UID" cannot create an invoice under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/invoices/someInvoiceId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) User "xHYjOZByDvVoCdllW9YbyGU9ZKb2" can create a unit under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/units/someUnitId.
     * @deny (create) User "DIFFERENT_UID" cannot create a unit under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/units/someUnitId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create) User "xHYjOZByDvVoCdllW9YbyGU9ZKb2" can create toolbar settings under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/settings/toolbarPositions.
     * @deny (create) User "DIFFERENT_UID" cannot create toolbar settings under /users/xHYjOZByDvVoCdllW9YbyGU9ZKb2/settings/toolbarPositions.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}