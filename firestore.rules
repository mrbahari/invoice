/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to shared product and category catalogs.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level collections for public access.
 * - All other data (Clients, Invoices, Stores, Units, Settings) is nested under /users/{userId}.
 *
 * Key Security Decisions:
 * - Users can only manage data under their own /users/{userId} path.
 * - Products and Categories are publicly readable but writes are not secured in this prototype.
 * - Listing user collections is allowed for the owner.
 *
 * Denormalization for Authorization:
 * - The Store entity has an ownerId field, denormalized to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information. Write access is not secured.
     * @path /products/{productId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, unsecured writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add write protection later.
    }

    /**
     * @description Allows public read access to category information. Write access is not secured.
     * @path /categories/{categoryId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, unsecured writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add write protection later.
    }

    /**
     * @description Enforces ownership for client documents under a user's profile.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list, create, update, delete): if isSignedIn() && isOwner(userId);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for invoice documents under a user's profile.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (get, list, create, update, delete): if isSignedIn() && isOwner(userId);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for store documents under a user's profile.
     * @path /users/{userId}/stores/{storeId}
     * @allow (get, list, create, update, delete): if isSignedIn() && isOwner(userId);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.ownerId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.ownerId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for unit documents under a user's profile.
     * @path /users/{userId}/units/{unitId}
     * @allow (get, list, create, update, delete): if isSignedIn() && isOwner(userId);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for toolbar settings documents under a user's profile.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (get, list, create, update, delete): if isSignedIn() && isOwner(userId);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}