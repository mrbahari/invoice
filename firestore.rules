rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a user-ownership model for user-specific data
     * and allows public read access to product and category data.
     *
     * Data Structure:
     * - Products and Categories are in top-level collections.
     * - All other data (clients, invoices, stores, units, settings) are nested under /users/{userId}.
     *
     * Key Security Decisions:
     * - Users can only access data they own (i.e., data under their userId).
     * - Products and categories are publicly readable but only the owner of the store can modify them.
     * - Denormalization for Authorization: The `Store` document requires an `ownerId` field to enforce ownership for products and categories.
     */

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Allows anyone to read product data, but only allows owners to modify.
     * @path /products/{productId}
     * @allow (get, list): if true;
     * @allow (create): if request.resource.data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
     * @allow (update): if get(/databases/$(database)/documents/products/$(productId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
     * @allow (delete): if get(/databases/$(database)/documents/products/$(productId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
     * @principle Allows public read access while restricting write access to store owners, using `get()` to validate against the ownerId.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)) && request.resource.data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
      allow update: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)) && get(/databases/$(database)/documents/products/$(productId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)).data.ownerId;
      allow delete: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)) && get(/databases/$(database)/documents/products/$(productId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)).data.ownerId;
    }

    /**
     * @description Allows anyone to read category data, but only allows owners to modify.
     * @path /categories/{categoryId}
     * @allow (get, list): if true;
     * @allow (create): if request.resource.data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
     * @allow (update): if get(/databases/$(database)/documents/categories/$(categoryId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
     * @allow (delete): if get(/databases/$(database)/documents/categories/$(categoryId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
     * @principle Allows public read access while restricting write access to store owners, using `get()` to validate against the ownerId.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)) && request.resource.data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(request.resource.data.storeId)).data.ownerId;
      allow update: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)) && get(/databases/$(database)/documents/categories/$(categoryId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)).data.ownerId;
      allow delete: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)) && get(/databases/$(database)/documents/categories/$(categoryId)).data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(resource.data.storeId)).data.ownerId;
    }

    /**
     * @description Enforces document ownership for client documents.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create): if isOwner(userId) && request.resource.data.id == clientId;
     * @allow (get, list, update, delete): if isOwner(userId);
     * @deny (create): if !isOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow create: if isOwner(userId) && request.resource.data.id == clientId;
      allow get, list: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces document ownership for invoice documents.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create): if isOwner(userId);
     * @allow (get, list, update, delete): if isOwner(userId);
     * @deny (create): if !isOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces document ownership for store documents.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create): if isOwner(userId) && request.resource.data.ownerId == userId;
     * @allow (get, list, update, delete): if isOwner(userId);
     * @deny (create): if !isOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/stores/{storeId} {
      allow create: if isOwner(userId) && request.resource.data.ownerId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
     * @description Enforces document ownership for units documents.
     * @path /users/{userId}/units/{unitId}
     * @allow (create): if isOwner(userId);
     * @allow (get, list, update, delete): if isOwner(userId);
     * @deny (create): if !isOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/units/{unitId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces document ownership for settings documents.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create): if isOwner(userId);
     * @allow (get, update, delete): if isOwner(userId);
     * @deny list: if true;
     * @principle Restricts access to a user's own settings.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}