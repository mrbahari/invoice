/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree
 * under `/users/{userId}` where they can store their own data. Access to these data trees
 * is restricted to the owning user.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`.  Each user owns a set of documents.
 *
 * Key Security Decisions:
 * - Users can only access data under their own user ID.
 * - Listing of user documents is allowed only for the owner.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the existing document.
     * @param {string} userId - The user ID to compare against the resource data's userId.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) User 'user123' can create a store under their own user ID.
     * @deny (create) User 'user456' cannot create a store under 'user123' ID.
     * @allow (get) User 'user123' can get a store under their own user ID.
     * @deny (get) User 'user456' cannot get a store under 'user123' ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) User 'user123' can create a product under their own user ID.
     * @deny (create) User 'user456' cannot create a product under 'user123' ID.
     * @allow (get) User 'user123' can get a product under their own user ID.
     * @deny (get) User 'user456' cannot get a product under 'user123' ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User 'user123' can create a category under their own user ID.
     * @deny (create) User 'user456' cannot create a category under 'user123' ID.
     * @allow (get) User 'user123' can get a category under their own user ID.
     * @deny (get) User 'user456' cannot get a category under 'user123' ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User 'user123' can create a client under their own user ID.
     * @deny (create) User 'user456' cannot create a client under 'user123' ID.
     * @allow (get) User 'user123' can get a client under their own user ID.
     * @deny (get) User 'user456' cannot get a client under 'user123' ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) User 'user123' can create a invoice under their own user ID.
     * @deny (create) User 'user456' cannot create a invoice under 'user123' ID.
     * @allow (get) User 'user123' can get a invoice under their own user ID.
     * @deny (get) User 'user456' cannot get a invoice under 'user123' ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific units.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) User 'user123' can create a unit under their own user ID.
     * @deny (create) User 'user456' cannot create a unit under 'user123' ID.
     * @allow (get) User 'user123' can get a unit under their own user ID.
     * @deny (get) User 'user456' cannot get a unit under 'user123' ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/units/{unitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific toolbar settings.
     * @path /users/{userId}/settings/toolbarPositions
     * @allow (create) User 'user123' can create toolbar settings under their own user ID.
     * @deny (create) User 'user456' cannot create toolbar settings under 'user123' ID.
     * @allow (get) User 'user123' can get toolbar settings under their own user ID.
     * @deny (get) User 'user456' cannot get toolbar settings under 'user123' ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/toolbarPositions {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}